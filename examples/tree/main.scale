# Tree
# --------------------------
# This example shows how one could implement a simple binary tree in
# Scale. The tree is represented as a recursive data structure, and
# the example also shows how to use the `static` keyword to define
# static functions on a struct.

import std.util.Triple

struct Node
    decl data: int
    decl left: Node?
    decl right: Node?

    static function ofTriple(maybeT: Triple?): Node?
        maybeT? => decl t: Triple

        Node {
            (t.a Node::ofTriple) => left
            (t.c Node::ofTriple) => right
            t.b => data
        } return
    end
end

function main(): none
    ( (nil, 1, nil), 2, ( (nil, 3, nil), 4, (nil, 5, nil) ) ) => decl t

    t Node::ofTriple!! => decl root: Node

    t:toString " -> " + root:toString + puts
end
