
function fopen(_filename_: str, _mode_: str): any
  decl _f_: any
  cdecl "Var__f_ = fopen(Var__filename_, Var__mode_);"
  _f_ return
end

function fclose(_file_: any): none
  cdecl "fclose(Var__file_);"
end

function ftell(_file_: any): int
  cdecl "stack.data[stack.ptr++].i = ftell(Var__file_);"
  return
end

function fileno(_file_: any): int
  cdecl "stack.data[stack.ptr++].i = fileno(Var__file_);"
  return
end

function fseek(_file_: any, _whence_: int, _offset_: int): none
  cdecl "fseek(Var__file_, Var__offset_, Var__whence_);"
end

function fwrite(_buf_: any, _size_: int, _file_: any): none
  cdecl "int _ignored = fwrite(Var__buf_, 1, Var__size_, Var__file_); (void) _ignored;"
end

function fputs(_file_: any, _str_: str): none
  _str_ _str_ strlen _file_ fwrite
  "\n" 1 _file_ fwrite
end

function fputint(_file_: any, _str_: str): none
  _file_ longToString fputs
end

function fputfloat(_file_: any, _str_: str): none
  _file_ doubleToString fputs
end

function fread(_f_: any, _size_: int): [any]
  decl _buf_: [any] _size_ malloc => _buf_
  cdecl "int _ignored = fread(Var__buf_, 1, Var__size_, Var__f_); (void) _ignored;"
  _buf_ return
end

function fseekstart(_f_: any, _offset_: int): none
  _f_ 0 _offset_ fseek
end

function fseekend(_f_: any, _offset_: int): none
  _f_ 2 _offset_ fseek
end

function fseekcur(_f_: any, _offset_: int): none
  _f_ 1 _offset_ fseek
end
