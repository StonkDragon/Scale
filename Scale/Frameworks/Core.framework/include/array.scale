#ifndef ARRAY_H
#define ARRAY_H

extern function trace()

struct Array
  decl values
  decl count
  decl capacity
end

extern function arraySort(array -> Array) -> Array

function arrayGet(arr -> Array, index) -> any
  arr.values index 3 << + @ return
end

function arraySet(arr -> Array, index, value) -> none
  decl tmp -> any
  arr.values index 3 << + store tmp
  value store @tmp
end

function arrayTop(arr -> Array) -> any
  arr.values arr.count 1 - 3 << + @ return
end

function arrayPush(arr -> Array, value) -> none
  arr.count arr.capacity >= if
    arr.capacity 2 * store arr.capacity
    arr.values arr.capacity 8 * realloc
    store arr.values
  fi

  decl tmp -> any
  arr.values arr.count 3 << + store tmp
  value store @tmp
  arr.count 1 + store arr.count
end

function arrayPop(arr -> Array) -> none
  arr.count 1 - store arr.count
end

function arrayCreate(initialSize) -> Array
  initialSize 1 < if
    "Invalid Argument: initialSize must not be 0 or less\n" puts trace 1 exit
  fi

  decl arr -> Array
  new Array store arr
  initialSize 8 * malloc
  store arr.values
  initialSize store arr.count
  initialSize store arr.capacity
  arr return
end

#endif
