using "util/pair" from "Core"

struct MapEntry
    decl key: str
    decl value: any
end

function MapEntry:init(key: str, value: any): none
    key => self.key
    value => self.value
end

struct Map
    decl _data: Array
end

function Map:init(size: int): none
    decl data: Array
    size Array:new => data
    for i in 0 to size do
        nil data:push
    done
    data => self._data
end

function Map:get(key: str): any
    decl data: Array self._data => data
    for i in 0 to data.count do
        decl entry: MapEntry i data:get => entry
        entry nil == if continue fi
        entry.key nil == if continue fi
        key entry.key strcmp if
            entry.value return
        fi
    done
    nil return
end

function Map:set(key: str, value: any): none
    decl data: Array self._data => data
    for i in 0 to data.count do
        decl entry: MapEntry i data:get => entry
        entry nil == if
            i key value MapEntry:new data:set
            return
        fi
    done
    key value MapEntry:new data:push
end

struct MapIterator
    decl array: Array
    decl pos: int
end

function MapIterator:init(map: Map): none
    map._data => self.map
    0 => self.pos
end

function MapIterator:has_next(): int
    self.pos self.array Array.count < return
end

function MapIterator:next(): MapEntry
    self.pos 1 + => self.pos
    self.pos self.array Array:get return
end

function MapIterator:begin(): MapEntry
    self.pos self.array Array:get return
end
