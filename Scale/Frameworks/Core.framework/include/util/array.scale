extern function trace(): none

struct Array
  decl values: any
  decl count: int
  decl capacity: int
end

extern function Array:sort(): none

function Array:get(index: int): any
  self.values index 3 << + @ return
end

function Array:set(index: int, value: any): none
  decl tmp: any
  self.values index 3 << + store tmp
  value store @tmp
end

function Array:top(): any
  self.values self.count 1 - 3 << + @ return
end

function Array:push(value: any): none
  self.count self.capacity >= if
    self.capacity 2 * store self.capacity
    self.capacity 8 * self.values realloc
    store self.values
  fi

  decl tmp: any
  self.values self.count 3 << + store tmp
  value store @tmp
  self.count 1 + store self.count
end

function Array:pop(): none
  self.count 1 - store self.count
end

function Array:init(size: int): none
  size 1 < if
    "Invalid Argument: size must not be 0 or less\n" eputs trace 1 exit
  fi
  size 8 * malloc
  store self.values
  0 store self.count
  size store self.capacity
end

struct ArrayIterator
    decl array: Array
    decl pos: int
end

function ArrayIterator:has_next(): int
    self.pos self.array Array.count < return
end

function ArrayIterator:next(): any
    self.pos 1 + store self.pos
    self.pos self.array Array:get return
end

function ArrayIterator:begin(): any
    self.pos self.array Array:get return
end

function ArrayIterator:init(arr: Array): none
    arr store self.array
    0 store self.pos
end

