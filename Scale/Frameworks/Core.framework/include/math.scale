container MathConstants
  decl e: float
  decl pi: float
end

function __init__math_scale(): none
  2.71828182845904523536028747135266250 => MathConstants.e
  3.14159265358979323846264338327950288 => MathConstants.pi

  start_c
    srand(time(NULL));
  end_c
end

function sqrt(_f_: float): float
  decl r: float
  start_c
    *r = sqrt(*_f_);
  end_c
  r return
end

function sin(_f_: float): float
  decl r: float
  start_c
    *r = sin(*_f_);
  end_c
  r return
end

function cos(_f_: float): float
  decl r: float
  start_c
    *r = cos(*_f_);
  end_c
  r return
end

function tan(_f_: float): float
  decl r: float
  start_c
    *r = tan(*_f_);
  end_c
  r return
end

function asin(_f_: float): float
  decl r: float
  start_c
    *r = asin(*_f_);
  end_c
  r return
end

function acos(_f_: float): float
  decl r: float
  start_c
    *r = acos(*_f_);
  end_c
  r return
end

function atan(_f_: float): float
  decl r: float
  start_c
    *r = atan(*_f_);
  end_c
  r return
end

function atan2(_f1_: float, _f2_: float): float
  decl r: float
  start_c
    *r = atan2(*_f1_, *_f2_);
  end_c
  r return
end

function sinh(_f_: float): float
  decl r: float
  start_c
    *r = sinh(*_f_);
  end_c
  r return
end

function cosh(_f_: float): float
  decl r: float
  start_c
    *r = cosh(*_f_);
  end_c
  r return
end

function tanh(_f_: float): float
  decl r: float
  start_c
    *r = tanh(*_f_);
  end_c
  r return
end

function asinh(_f_: float): float
  decl r: float
  start_c
    *r = asinh(*_f_);
  end_c
  r return
end

function acosh(_f_: float): float
  decl r: float
  start_c
    *r = acosh(*_f_);
  end_c
  r return
end

function atanh(_f_: float): float
  decl r: float
  start_c
    *r = atanh(*_f_);
  end_c
  r return
end

function exp(_f_: float): float
  decl r: float
  start_c
    *r = exp(*_f_);
  end_c
  r return
end

function log(_f_: float): float
  decl r: float
  start_c
    *r = log(*_f_);
  end_c
  r return
end

function log10(_f_: float): float
  decl r: float
  start_c
    *r = log10(*_f_);
  end_c
  r return
end

function random(): int
  decl r: int
  start_c
    *r = ((scl_int) rand() << 32) | (scl_int) rand();
  end_c
  r return
end

function iseven(_i_: int): int
  _i_ 2 % 0 == return
end

function isodd(_i_: int): int
  _i_ iseven ! return
end

function lrandom(_limit_: int): int
  random _limit_ % return
end

function lerp(_a_: int, _b_: int, _t_: int): int
  _b_ _a_ - _t_ * _a_ + return
end

function neg(_i_: int): int
  _i_ 0 swap - return
end
