# Scale Framework Documentation
@std
## Core
### function sleep(_millis_: int): none
Sleeps for <<WHITE>>_millis_<<RESET>> milliseconds.
This function can be used to suspend execution for a given amount of time.

### function system(_cmd_: str): int
Executes the shell command <<WHITE>>_cmd_<<RESET>> and returns the return value.

### function getenv(_key_: str): str?
Returns the value of the environment variable <<WHITE>>_key_<<RESET>>.
If the environment variable is not set, <<BLUE>>nil<<RESET>> is returned.

### function sizeofStack(): int
Returns the current stack size.

### function malloc(_size_: int): any
Returns a pointer to <<WHITE>>_size_<<RESET>> bytes of memory.
This memory may not be <<GREEN>>0<<RESET>>-initialized.
It is undefined behavior to pass in a <<WHITE>>_size_<<RESET>> of <<GREEN>>0<<RESET>>.
The amount of allocated memory will be padded to a multiple of <<GREEN>>8<<RESET>> (<<GREEN>>4<<RESET>> on 32-bit systems).

### function realloc(_ptr_: any, _size_: int): any
Reallocates the memory pointed to by <<WHITE>>_ptr_<<RESET>> with a new size of <<WHITE>>_size_<<RESET>> bytes.
Any call to <<WHITE>>realloc<<RESET>> may invalidate the old pointer so it is strongly suggested to reassign it to the return value.
If <<WHITE>>_ptr_<<RESET>> is <<BLUE>>nil<<RESET>> the function will behave identical to <<WHITE>>malloc<<RESET>>.
It is undefined behavior to pass in a <<WHITE>>_size_<<RESET>> of <<GREEN>>0<<RESET>>.

### function free(_ptr_: any): none
Frees the memory pointed to by <<WHITE>>_ptr_<<RESET>>.
If <<WHITE>>_ptr_<<RESET>> was not allocated or is <<BLUE>>nil<<RESET>>, this function will do nothing.

### function memset(ptr: [any], val: int, len: int): [any]
Sets the first <<WHITE>>len<<RESET>> bytes pointed to by <<WHITE>>ptr<<RESET>> to <<WHITE>>val<<RESET>>.
Returns a pointer to the changed memory.

### function memcpy(dst: [any], src: [any], n: int): [any]
Copies <<WHITE>>n<<RESET>> bytes from <<WHITE>>src<<RESET>> to <<WHITE>>dst<<RESET>> and returns <<WHITE>>dst<<RESET>>.

### function time(): float
Returns the current time in seconds as a float.

### function longToString(_long_: int): str
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>toString<<RESET>>
Converts <<WHITE>>_long_<<RESET>> to a string.

### function stringToLong(_str_: str): int
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>parse<<RESET>>
Converts <<WHITE>>_str_<<RESET>> to an interger.
Returns <<GREEN>>0<<RESET>> if the string is not a valid number.
If <<WHITE>>_str_<<RESET>> contains the string representation of a float, this function will return the whole part of the number.

### function stringToDouble(_str_: str): float
<<RED>>This function has been deprecated in favor of <<BLUE>>float::<<WHITE>>toString<<RESET>>
Converts <<WHITE>>_str_<<RESET>> to a float.
Returns <<WHITE>>0<<RESET>> if the string is not a valid float.
Undefined behavior is invoked if the number is out of range for a 64-Bit floating point number.

### function doubleToString(_double_: float): str
<<RED>>This function has been deprecated in favor of <<BLUE>>float::<<WHITE>>parse<<RESET>>
Converts <<WHITE>>_double_<<RESET>> to a string.

### function nop(): none
<<RED>>This function has been deprecated<<RESET>>
Do nothing.

@std.Any
## Any
### static function any::new(size: int): any
Returns a pointer to <<WHITE>>size<<RESET>> bytes of memory.
This memory may not be <<GREEN>>0<<RESET>>-initialized.
It is undefined behavior to pass in a <<WHITE>>size<<RESET>> of <<GREEN>>0<<RESET>>.
The amount of allocated memory will be padded to a multiple of <<GREEN>>8<<RESET>> (<<GREEN>>4<<RESET>> on 32-bit systems).

### static function any::default(): any
Returns a pointer to <<BLUE>>sizeof any<<RESET>> bytes of memory.
This memory may not be <<GREEN>>0<<RESET>>-initialized.

### static function any::delete(ptr: any): none
Frees the memory pointed to by <<WHITE>>ptr<<RESET>>.
If <<WHITE>>ptr<<RESET>> was not allocated or is <<BLUE>>nil<<RESET>>, this function will do nothing.

### static function any::size(ptr: any): int
Returns the amount of bytes <<WHITE>>ptr<<RESET>> points to.
Returns <<GREEN>>-1<<RESET>> if the pointer was not allocated.

### static function any::toString(x: any): int
Returns the amount of bytes <<WHITE>>ptr<<RESET>> points to.
Returns <<GREEN>>-1<<RESET>> if the pointer was not allocated.

### static function any::toHexString(x: any): int
Returns the hexadecimal representation of <<WHITE>>x<<RESET>> as a string.

@std.Int
## Int
### static function int::toString(i: int): str
Converts <<WHITE>>i<<RESET>> to a string.

### static function int::toHexString(i: int): str
Returns the hexadecimal representation of <<WHITE>>i<<RESET>> as a string.

### static function int::parse(s: str): int
Converts <<WHITE>>s<<RESET>> to an interger.
Returns <<GREEN>>0<<RESET>> if the string is not a valid number.
If <<WHITE>>s<<RESET>> contains the string representation of a float, this function will return the whole part of the number.

### static function int::toInt8(_val_: int): int8
Converts <<WHITE>>_val_<<RESET>> to an 8-Bit integer.

### static function int::toInt16(_val_: int): int16
Converts <<WHITE>>_val_<<RESET>> to a 16-Bit integer.

### static function int::toInt32(_val_: int): int32
Converts <<WHITE>>_val_<<RESET>> to a 32-Bit integer.

### static function int::toInt(_val_: any): int
Converts <<WHITE>>_val_<<RESET>> to an integer with the default bit width of the platform.
32 bits on 32-Bit systems and 64 bits on 64-Bit systems.

### static function int::toUInt8(_val_: int): int8
Converts <<WHITE>>_val_<<RESET>> to an unsigned 8-Bit integer.

### static function int::toUInt16(_val_: int): int16
Converts <<WHITE>>_val_<<RESET>> to a unsigned 16-Bit integer.

### static function int::toUInt32(_val_: int): int32
Converts <<WHITE>>_val_<<RESET>> to a unsigned 32-Bit integer.

### static function int::toUInt(_val_: any): uint
Converts <<WHITE>>_val_<<RESET>> to an unsigned integer with the default bit width of the platform.
32 bits on 32-Bit systems and 64 bits on 64-Bit systems.

### static function int::isValidInt8(_val_: any): bool
Returns <<BLUE>>true<<RESET>>, if <<WHITE>>_val_<<RESET>> is a valid 8-Bit integer.

### static function int::isValidInt16(_val_: any): bool
Returns <<BLUE>>true<<RESET>>, if <<WHITE>>_val_<<RESET>> is a valid 16-Bit integer.

### static function int::isValidInt32(_val_: any): bool
Returns <<BLUE>>true<<RESET>>, if <<WHITE>>_val_<<RESET>> is a valid 32-Bit integer.

### static function int::isValidUInt8(_val_: any): bool
Returns <<BLUE>>true<<RESET>>, if <<WHITE>>_val_<<RESET>> is a valid unsigned 8-Bit integer.

### static function int::isValidUInt16(_val_: any): bool
Returns <<BLUE>>true<<RESET>>, if <<WHITE>>_val_<<RESET>> is a valid unsigned 16-Bit integer.

### static function int::isValidUInt32(_val_: any): bool
Returns <<BLUE>>true<<RESET>>, if <<WHITE>>_val_<<RESET>> is a valid unsigned 32-Bit integer.

### function toInt8(_val_: int): int8
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>toInt8<<RESET>>
Converts <<WHITE>>_val_<<RESET>> to an 8-Bit integer.

### function toInt16(_val_: int): int16
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>toInt16<<RESET>>
Converts <<WHITE>>_val_<<RESET>> to a 16-Bit integer.

### function toInt32(_val_: int): int32
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>toInt32<<RESET>>
Converts <<WHITE>>_val_<<RESET>> to a 32-Bit integer.

### function toInt(_val_: any): int
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>toInt<<RESET>>
Converts <<WHITE>>_val_<<RESET>> to an integer with the default bit width of the platform.
32 bits on 32-Bit systems and 64 bits on 64-Bit systems.

### function toUInt8(_val_: int): int8
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>toUInt8<<RESET>>
Converts <<WHITE>>_val_<<RESET>> to an unsigned 8-Bit integer.

### function toUInt16(_val_: int): int16
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>toUInt16<<RESET>>
Converts <<WHITE>>_val_<<RESET>> to a unsigned 16-Bit integer.

### function toUInt32(_val_: int): int32
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>toUInt32<<RESET>>
Converts <<WHITE>>_val_<<RESET>> to a unsigned 32-Bit integer.

### function toUInt(_val_: any): uint
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>toUInt<<RESET>>
Converts <<WHITE>>_val_<<RESET>> to an unsigned integer with the default bit width of the platform.
32 bits on 32-Bit systems and 64 bits on 64-Bit systems.

### function isValidInt8(_val_: any): bool
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>isValidInt8<<RESET>>
Returns <<BLUE>>true<<RESET>>, if <<WHITE>>_val_<<RESET>> is a valid 8-Bit integer.

### function isValidInt16(_val_: any): bool
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>isValidInt16<<RESET>>
Returns <<BLUE>>true<<RESET>>, if <<WHITE>>_val_<<RESET>> is a valid 16-Bit integer.

### function isValidInt32(_val_: any): bool
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>isValidInt32<<RESET>>
Returns <<BLUE>>true<<RESET>>, if <<WHITE>>_val_<<RESET>> is a valid 32-Bit integer.

### function isValidUInt8(_val_: any): bool
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>isValidUInt8<<RESET>>
Returns <<BLUE>>true<<RESET>>, if <<WHITE>>_val_<<RESET>> is a valid unsigned 8-Bit integer.

### function isValidUInt16(_val_: any): bool
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>isValidUInt16<<RESET>>
Returns <<BLUE>>true<<RESET>>, if <<WHITE>>_val_<<RESET>> is a valid unsigned 16-Bit integer.

### function isValidUInt32(_val_: any): bool
<<RED>>This function has been deprecated in favor of <<BLUE>>int::<<WHITE>>isValidUInt32<<RESET>>
Returns <<BLUE>>true<<RESET>>, if <<WHITE>>_val_<<RESET>> is a valid unsigned 32-Bit integer.

### function isnil(x: any): bool
Returns <<BLUE>>true<<RESET>>, if <<WHITE>>x<<RESET>> is <<BLUE>>nil<<RESET>>.

### function isnotnil(x: any): bool
Returns <<BLUE>>true<<RESET>>, if <<WHITE>>x<<RESET>> is not <<BLUE>>nil<<RESET>>.

@std.io
## IO
### function write(_fd_: int, _str_: str, _n_: int): none
Writes <<WHITE>>_n_<<RESET>> bytes of <<WHITE>>_str_<<RESET>> to file descriptor <<WHITE>>_fd_<<RESET>>.

### function read(_fd_: int, _n_: int): any
Reads <<WHITE>>_n_<<RESET>> bytes from file descriptor <<WHITE>>_fd_<<RESET>>.

### function puts(_str_: str): none
Prints <<WHITE>>_str_<<RESET>> followed by a new line to the standard output.

### function eputs(_str_: str): none
Prints <<WHITE>>_str_<<RESET>> followed by a new line to the standard error output.

### function putint(_int_: int): none
Prints the number <<WHITE>>_int_<<RESET>> followed by a new line to the standard output.

### function putfloat(f: float): none
Prints the float <<WHITE>>f<<RESET>> followed by a new line to the standard output.

### function throwerr(_err_: str): none
Prints <<WHITE>>_err_<<RESET>> to standard error output and exits with exit code 1.

@std.math
## Math
### container MathConstants
Member types:
- <<BLUE>>const <<WHITE>>e<<BLUE>>: float<<RESET>>
- <<BLUE>>const <<WHITE>>pi<<BLUE>>: float<<RESET>>
- <<BLUE>>const <<WHITE>>nan<<BLUE>>: float<<RESET>>
- <<BLUE>>const <<WHITE>>infinity<<BLUE>>: float<<RESET>>
<<WHITE>>e<<RESET>>: The math constant <<WHITE>>e<<RESET>>.
It is equal to <<GREEN>>2.71828182845904523536028747135266250<<RESET>>
<<WHITE>>pi<<RESET>>: The math constant <<WHITE>>pi<<RESET>>.
It is equal to <<GREEN>>3.14159265358979323846264338327950288<<RESET>>
<<WHITE>>nan<<RESET>>: A floating point value representing "Not a Number".
<<WHITE>>infinity<<RESET>>: A floating point value representing positive infinity.

### function acos(f: float): float
Returns the arc cosine of <<WHITE>>f<<RESET>>.

### function asin(f: float): float
Returns the arc sine of <<WHITE>>f<<RESET>>.

### function atan(f: float): float
Returns the arc tangent of <<WHITE>>f<<RESET>>.

### function atan2(y: float, x: float): float
Returns the angle of the point <<BLUE>>(<<WHITE>>x<<BLUE>>, <<WHITE>>y<<BLUE>>)<<RESET>> to the x-Axis.

### function cos(f: float): float
Returns the cosine of <<WHITE>>f<<RESET>>.

### function sin(f: float): float
Returns the sine of <<WHITE>>f<<RESET>>.

### function tan(f: float): float
Returns the tangent of <<WHITE>>f<<RESET>>.

### function acosh(f: float): float
Returns the area hyperbolic cosine of <<WHITE>>f<<RESET>>.

### function asinh(f: float): float
Returns the area hyperbolic sine of <<WHITE>>f<<RESET>>.

### function atanh(f: float): float
Returns the area hyperbolic tangent of <<WHITE>>f<<RESET>>.

### function cosh(f: float): float
Returns the hyperbolic cosine of <<WHITE>>f<<RESET>>.

### function sinh(f: float): float
Returns the hyperbolic sine of <<WHITE>>f<<RESET>>.

### function tanh(f: float): float
Returns the hyperbolic tangent of <<WHITE>>f<<RESET>>.

### function exp(f: float): float
Returns <<WHITE>>MathConstants<<BLUE>>.<<WHITE>>e<<RESET>> raised to the power of <<WHITE>>f<<RESET>>.

### function exp2(f: float): float
Returns <<GREEN>>2<<RESET>> raised to the power of <<WHITE>>f<<RESET>>.

### function expm1(f: float): float
Returns <<WHITE>>MathConstants<<BLUE>>.<<WHITE>>e<<RESET>> raised to the power of <<WHITE>>f<<RESET>> minus <<GREEN>>1<<RESET>>.
For small values of <<WHITE>>f<<RESET>>, this may be more accurate than <<WHITE>>f exp <<GREEN>>1 <<BLUE>>-<<RESET>>.

### function log(f: float): float
Returns the natural logarithm of <<WHITE>>f<<RESET>>.

### function log10(f: float): float
Returns the common (base-10) logarithm of <<WHITE>>f<<RESET>>.

### function log2(f: float): float
Returns the binary logarithm of <<WHITE>>f<<RESET>>.

### function log1p(f: float): float
Returns the natural logarithm of <<GREEN>>1 <<WHITE>>f <<BLUE>>+<<RESET>>.
For small values of <<WHITE>>f<<RESET>>, this may be more accurate than <<WHITE>>f <<GREEN>>1 <<BLUE>>+ <<WHITE>>exp<<RESET>>.

### function logb(f: float): float
Returns the logarithm of the absolute value of <<WHITE>>f<<RESET>>.

### function fabs(f: float): float
Returns the absolute value of <<WHITE>>f<<RESET>>.

### function cbrt(f: float): float
Returns the cubic root of <<WHITE>>f<<RESET>>.

### function hypot(x: float, y: float): float
Returns the hypotenuse of a right-angled triangle whose legs are <<WHITE>>x<<RESET>> and <<WHITE>>y<<RESET>>.

The function returns what would be the square root of the sum of the squares of <<WHITE>>x<<RESET>> and <<WHITE>>y<<RESET>>.

### function pow(base: float, exp: float): float
Returns <<WHITE>>base<<RESET>> raised to the power of <<WHITE>>exp<<RESET>>.

### function sqrt(f: float): float
Returns the square root of <<WHITE>>f<<RESET>>.

### function erf(f: float): float
Returns the error function value for <<WHITE>>f<<RESET>>.

### function erfc(f: float): float
Returns the complementary error function value for <<WHITE>>f<<RESET>>.

### function lgamma(f: float): float
Returns the natural logarithm of the absolute value of the gamma function of <<WHITE>>f<<RESET>>.

### function tgamma(f: float): float
Returns the gamma function of <<WHITE>>f<<RESET>>.

### function ceil(f: float): float
Rounds <<WHITE>>f<<RESET>> upwards to the nearest integer value not less than <<WHITE>>f<<RESET>>.

### function floor(f: float): float
Rounds <<WHITE>>f<<RESET>> downwards to the nearest integer value not more than <<WHITE>>f<<RESET>>.

### function round(f: float): float
Returns the integer value that is nearest to <<WHITE>>f<<RESET>>, with halfway cases rounded away from zero.

### function trunc(f: float): float
Rounds <<WHITE>>f<<RESET>> toward zero, returning the nearest integral value that is not larger in magnitude than <<WHITE>>f<<RESET>>.

### function fmod(a: float, b: float): float
Returns the floating-point remainder of <<WHITE>>a<<BLUE>>/<<WHITE>>b<<RESET>>.

### function remainder(a: float, b: float): float
Returns the floating-point remainder of <<WHITE>>a<<BLUE>>/<<WHITE>>b<<RESET>>.

### function fdim(x: float, y: float): float
Returns the positive difference between <<WHITE>>x <<RESET>>and <<WHITE>>y<<RESET>>.

### function fmax(x: float, y: float): float
Returns the larger of the two arguments.

### function fmin(x: float, y: float): float
Returns the smaller of the two arguments.

### function fma(x: float, y: float, z: float): float
Returns <<WHITE>>x y <<BLUE>>* <<WHITE>>z <<BLUE>>+<<RESET>>.
The function computes the result without losing precision in any intermediate result.

### function isInfinite(x: float): bool
<<RED>>This function has been deprecated in favor of <<BLUE>>float::<<WHITE>>isInfinite<<RESET>>
Returns <<BLUE>>true<<RESET>> if <<WHITE>>x<<RESET>> represents infinity.

### function isNaN(x: float): bool
<<RED>>This function has been deprecated in favor of <<BLUE>>float::<<WHITE>>isNaN<<RESET>>
Returns <<BLUE>>true<<RESET>> if <<WHITE>>x<<RESET>> represents NaN.

### function isFinite(x: float): bool
<<RED>>This function has been deprecated in favor of <<BLUE>>float::<<WHITE>>isFinite<<RESET>>
Returns <<BLUE>>true<<RESET>> if <<WHITE>>x<<RESET>> represents neither NaN nor infinity.

### function isNotNaN(x: float): bool
<<RED>>This function has been deprecated in favor of <<BLUE>>float::<<WHITE>>isNotNaN<<RESET>>
Returns <<BLUE>>true<<RESET>> if <<WHITE>>x<<RESET>> represents anything but NaN.

### function random(): int
Returns a random <<BLUE>>int<<RESET>>.

### function iseven(i: int): int
Returns <<BLUE>>true<<RESET>> if <<WHITE>>i<<RESET>> is evenly divisible by <<GREEN>>2<<RESET>>.

### function isodd(i: int): int
Returns <<BLUE>>true<<RESET>> if <<WHITE>>i<<RESET>> is not evenly divisible by <<GREEN>>2<<RESET>>.

### function lrandom(lim: int): int
Returns a random <<BLUE>>int<<RESET>> not exceeding <<WHITE>>lim<<RESET>>.

### function lerp(_a_: float, _b_: float, _t_: float): float
Linear interpolation between <<WHITE>>_a_<<RESET>> and <<WHITE>>_b_<<RESET>> with the argument <<WHITE>>_t_<<RESET>>.

### function neg(i: int): int
Returns <<WHITE>>_i_<<BLUE>> *<<GREEN>> -1<<RESET>>.

@std.fs
## File
### struct File
The <<WHITE>>File<<RESET>> struct represents a file.

### static function File::new(name: str): File
Creates a new File instance of the file with the given name as the path.

### function File:name(): str
Returns the name of the file.

### function File:close(): none
Closes the underlying file handle.

### function File:append(s: str): none
Appends the given string to the end of the file.

### function File:puts(s: str): none
Prints the given string to the end of the file and appends a new line.

### function File:writeBinary(buf: any, sz: int): none
Writes <<WHITE>>sz<<RESET>> bytes of the buffer <<WHITE>>buf<<RESET>> to the file.

### function File:read(sz: int): any
Returns up to <<WHITE>>sz<<RESET>> bytes of data from the file.

### function File:offsetFromBegin(off: int): none
Moves the current position in the file to <<WHITE>>off<<RESET>> bytes from the beginning of the file.

### function File:offsetFromEnd(off: int): none
Moves the current position in the file to <<WHITE>>off<<RESET>> bytes from the end of the file.

### function File:offset(off: int): none
Moves the current position in the file <<WHITE>>off<<RESET>> bytes forward.

### function File:fileno(): int
Returns the underlying file descriptor of this instance.

### function File:pos(): int
Returns the current position in the file.

### function File:delete(): bool
Deletes the file and returns <<BLUE>>true<<RESET>> if it was successful.

### function File:create(): none
Creates this file if it doesn't already exist.

### static function File::exists(name: str): bool
Returns <<BLUE>>true<<RESET>> if the file with the name <<WHITE>>name<<RESET>> exists.

### function fopen(_filename_: str, _mode_: str): any
<<RED>>This function has been deprecated in favor of <<BLUE>>struct <<WHITE>>File<<RESET>>
Opens a new file handle of file <<WHITE>>_filename_<<RESET>> in mode <<WHITE>>_mode_<<RESET>>.

### function fclose(_file_: any): none
<<RED>>This function has been deprecated in favor of <<BLUE>>struct <<WHITE>>File<<RESET>>
Closes the file handle <<WHITE>>_file_<<RESET>>.

### function ftell(_file_: any): int
<<RED>>This function has been deprecated in favor of <<BLUE>>struct <<WHITE>>File<<RESET>>
Returns the current position in the file <<WHITE>>_file_<<RESET>>.

### function fileno(_file_: any): int
<<RED>>This function has been deprecated in favor of <<BLUE>>struct <<WHITE>>File<<RESET>>
Returns the file descriptor of <<WHITE>>_file_<<RESET>>.

### function fseek(_file_: any, _whence_: int, _offset_: int): none
<<RED>>This function has been deprecated in favor of <<BLUE>>struct <<WHITE>>File<<RESET>>
Seeks to <<WHITE>>_offset_<<RESET>> in the <<WHITE>>_file_<<RESET>> from <<WHITE>>_whence_<<RESET>>.

### function fwrite(_buf_: any, _size_: int, _file_: any): none
<<RED>>This function has been deprecated in favor of <<BLUE>>struct <<WHITE>>File<<RESET>>
Writes <<WHITE>>_size_<<RESET>> bytes of buffer <<WHITE>>_buf_<<RESET>> to the file <<WHITE>>_file_<<RESET>>.

### function fwrites(_buf_: str, _size_: int, _file_: any): none
<<RED>>This function has been deprecated in favor of <<BLUE>>struct <<WHITE>>File<<RESET>>
Writes <<WHITE>>_size_<<RESET>> bytes of string <<WHITE>>_buf_<<RESET>> to the file <<WHITE>>_file_<<RESET>>.

### function fputs(_file_: any, _str_: str): none
<<RED>>This function has been deprecated in favor of <<BLUE>>struct <<WHITE>>File<<RESET>>
Prints the string <<WHITE>>_str_<<RESET>> to <<WHITE>>_file_<<RESET>>.

### function fputs(_file_: any, _int_: int): none
<<RED>>This function has been deprecated in favor of <<BLUE>>struct <<WHITE>>File<<RESET>>
Prints the integer <<WHITE>>_int_<<RESET>> to <<WHITE>>_file_<<RESET>>.

### function fputs(_file_: any, _float_: float): none
<<RED>>This function has been deprecated in favor of <<BLUE>>struct <<WHITE>>File<<RESET>>
Prints the float <<WHITE>>_float_<<RESET>> to <<WHITE>>_file_<<RESET>>.

### function fread(f: any, _size_: int): [any]?
<<RED>>This function has been deprecated in favor of <<BLUE>>struct <<WHITE>>File<<RESET>>
Reads <<WHITE>>_size_<<RESET>> bytes from file <<WHITE>>f<<RESET>>.

### function fseekstart(f: any, _offset_: int): none
<<RED>>This function has been deprecated in favor of <<BLUE>>struct <<WHITE>>File<<RESET>>
Seeks to position <<WHITE>>_offset_<<RESET>> from the start of file <<WHITE>>f<<RESET>>.

### function fseekend(f: any, _offset_: int): none
<<RED>>This function has been deprecated in favor of <<BLUE>>struct <<WHITE>>File<<RESET>>
Seeks to position <<WHITE>>_offset_<<RESET>> from the end of file <<WHITE>>f<<RESET>>.

### function fseekcur(f: any, _offset_: int): none
<<RED>>This function has been deprecated in favor of <<BLUE>>struct <<WHITE>>File<<RESET>>
Seeks to position <<WHITE>>_offset_<<RESET>> from the current position of file <<WHITE>>f<<RESET>>.

@std.Float
## Float
### static function float::toString(x: float): str
Converts <<WHITE>>x<<RESET>> to a string.

### static function float::toPrecisionString(x: float): str
Converts <<WHITE>>x<<RESET>> to a string with the highest precision available.

### static function float::toHexString(x: float): str
Returns the hexadecimal representation of <<WHITE>>x<<RESET>> as a string.

### static function float::parse(s: str): float
Converts <<WHITE>>s<<RESET>> to a float.
Returns <<WHITE>>0<<RESET>> if the string is not a valid float.
Undefined behavior is invoked if the number is out of range for a 64-Bit floating point number.

### static function float::bits(x: float) val: int
Returns the bit representation of the float <<WHITE>>x<<RESET>>.

### static function float::isInfinite(x: float): bool
Returns <<BLUE>>true<<RESET>> if <<WHITE>>x<<RESET>> represents infinity.

### static function float::isNaN(x: float): bool
Returns <<BLUE>>true<<RESET>> if <<WHITE>>x<<RESET>> represents NaN.

### static function float::isFinite(x: float): bool
Returns <<BLUE>>true<<RESET>> if <<WHITE>>x<<RESET>> represents neither NaN nor infinity.

### static function float::isNotNaN(x: float): bool
Returns <<BLUE>>true<<RESET>> if <<WHITE>>x<<RESET>> represents anything but NaN.

@std.math.Fraction
## Fraction
### struct Fraction
Member types:
- <<WHITE>>numerator<<BLUE>>: int<<RESET>>
- <<WHITE>>denominator<<BLUE>>: int<<RESET>>

<<WHITE>>numerator<<RESET>>: The numerator of the fraction
<<WHITE>>denominator<<RESET>>: The denominator of the fraction

### static function Fraction::new(numerator: int, denominator: int): Fraction
Creates a new fraction with the given numerator and denominator.

### static function Fraction::fromFloat(val: float): Fraction
Creates a new fraction from the given <<BLUE>>float<<RESET>> value.

### function Fraction:toString(): str
Returns a string representation of this fraction.
It follows this pattern: numerator "/" denominator

### function Fraction:toFloat(): float
Returns a float approximation of the fraction.

### function Fraction:+(other: Fraction): Fraction
Adds two fractions and returns a new Fraction based on the result of the addition.

### function Fraction:-(other: Fraction): Fraction
Subtracts two fractions and returns a new Fraction based on the result of the subtraction.

### function Fraction:++(): Fraction
Increments this fraction by adding the denominator to the numerator once.

### function Fraction:--(): Fraction
Increments this fraction by subtracting the denominator from the numerator once.

### function Fraction:*(other: Fraction): Fraction
Multiplies two fractions and returns a new Fraction based on the result of the multiplication.

### function Fraction:/(other: Fraction): Fraction
Divides two fractions and returns a new Fraction based on the result of the division.

### function Fraction:inverse(): Fraction
Returns the inverse of this fraction.

@std.util.Array
## Array
### struct Array
Member types:
- <<BLUE>>readonly <<WHITE>>values<<BLUE>>: any<<RESET>>
- <<BLUE>>readonly <<WHITE>>count<<BLUE>>: int<<RESET>>
- <<BLUE>>readonly <<WHITE>>capacity<<BLUE>>: int<<RESET>>

<<WHITE>>values<<RESET>>: Contains the contents of the array.
<<WHITE>>count<<RESET>>: Contains the amount of elements in the array.
<<WHITE>>capacity<<RESET>>: Contains the maximum capacity of the array.

### function Array:sort(): none
Sorts the array.
If the array is empty, the function will do nothing.

### function Array:get(index: int): any
Returns the value at <<WHITE>>index<<RESET>>.
If the index is out of bounds for the array, an <<WHITE>>IndexOutOfBoundsException<<RESET>> will be thrown.

### function Array:set(index: int, value: any): none
Sets the value at <<WHITE>>index<<RESET>> to <<WHITE>>value<<RESET>>.
If the index is out of bounds for the array, an <<WHITE>>IndexOutOfBoundsException<<RESET>> will be thrown.

### function Array:top(): any
Returns the top value of the array.
This invocation is identical to <<WHITE>>Array.count <<GREEN>>1 <<BLUE>>-<<WHITE>> Array:get<<RESET>>.
If the array is empty, an <<WHITE>>IndexOutOfBoundsException<<RESET>> will be thrown.

### function Array:push(value: any): none
Returns <<WHITE>>value<<RESET>> onto the array.
If the array has no more free slots, it will be resized accordingly.

### function Array:pop(): none
Pops the top value of the array by decrementing the <<WHITE>>count<<RESET>> property on the array.
If the array is empty, an <<WHITE>>IndexOutOfBoundsException<<RESET>> will be thrown.

### function Array:indexOf(val: any): int
Returns the index of the first occurence of <<WHITE>>val<<RESET>> in the array.
Returns <<GREEN>>-1<<RESET>> if <<WHITE>>val<<RESET>> is not found in the array.

### function Array:contains(val: any): bool
Returns <<BLUE>>true<<RESET>>, if the array contains <<WHITE>>val<<RESET>>.

### function Array:toString(): str
Returns a stringified version of the array.

### function Array:immutableCopy(): ImmutableArray
Returns an immutable copy of the array.

### function Array:remove(val: any): none
Removes the first occurence of <<WHITE>>val<<RESET>> from the array.
This function does nothing if <<WHITE>>val<<RESET>> is not in the array.

### function Array:removeAll(val: any): none
Removes all occurences of <<WHITE>>val<<RESET>> in the array.
This function does nothing if <<WHITE>>val<<RESET>> is not in the array.

### function Array:map(x: lambda(any): none): none
Runs the <<BLUE>>lambda <<WHITE>>x<<RESET>> for every element in the array.

### function Array:filter(x: lambda(any): bool): Array
Returns a new array with only those elements in it for which the <<BLUE>>lambda <<WHITE>>x<<RESET>> returns <<BLUE>>true<<RESET>>.

### function Array:reverse(): Array
Reverses the order of the elements in the array.

### static function Array::new(size: int): none
Create an empty array with an initial capacity of <<WHITE>>size<<RESET>> elements, where <<WHITE>>size<<RESET>> is bigger than <<GREEN>>0<<RESET>>.

### static function Array::fromPointerCollection(count: int, values: [any]): Array
Returns a new array that contains count elements of the c-style array values.

@std.util.ReadOnlyArray
## ReadOnlyArray
### static function ReadOnlyArray::fromArray(arr: Array): ReadOnlyArray
Creates a new <<WHITE>>ReadOnlyArray<<RESET>> from the given <<WHITE>>Array<<RESET>>.

### static function ReadOnlyArray::fromPointerCollection(count: int, values: [any]): ReadOnlyArray
Creates a new <<WHITE>>ReadOnlyArray<<RESET>> containing <<WHITE>>count<<RESET>> elements from the given c-style array.

### function ReadOnlyArray:sort(): none
Throws <<WHITE>>IllegalStateException<<RESET>>.

### function ReadOnlyArray:set(index: int, value: any): none
Throws <<WHITE>>IllegalStateException<<RESET>>.

### function ReadOnlyArray:push(value: any): none
Throws <<WHITE>>IllegalStateException<<RESET>>.

### function ReadOnlyArray:pop(): none
Throws <<WHITE>>IllegalStateException<<RESET>>.

### function ReadOnlyArray:reverse(): Array
Throws <<WHITE>>IllegalStateException<<RESET>>.

### function ReadOnlyArray:remove(val: any): none
Throws <<WHITE>>IllegalStateException<<RESET>>.

### function ReadOnlyArray:removeAll(val: any): none
Throws <<WHITE>>IllegalStateException<<RESET>>.

## IllegalStateException
### static function IllegalStateException::new(msg: str): IllegalStateException
Creates a new <<WHITE>>IllegalStateException<<RESET>> with the given message.

@std.String
## String
### function str:+(other: str): str
Returns a new string with the contents of <<WHITE>>other<<RESET>> appended to the end of the string.

### function str:++(c: int): str
Returns a new string with the character stored in <<WHITE>>c<<RESET>> appended to the end of the string.

### function str:clone(): str
Returns a copy of the string.

### function str:append(other: str): str
Returns a new string with the contents of <<WHITE>>other<<RESET>> appended to the end of the string.

### function str:prepend(other: str): str
Returns a new string with the contents of <<WHITE>>other<<RESET>> prepended at the start of the string.

### function str:==(other: str): bool
Returns <<BLUE>>true<<RESET>>, if the string equals <<WHITE>>other<<RESET>>, <<BLUE>>false<<RESET>> otherwise.
Will return <<BLUE>>false<<RESET>> if either of the strings is <<BLUE>>nil<<RESET>>.

### function str:equals(other: str): bool
Returns <<BLUE>>true<<RESET>>, if the string equals <<WHITE>>other<<RESET>>, <<BLUE>>false<<RESET>> otherwise.
Will return <<BLUE>>false<<RESET>> if either of the strings is <<BLUE>>nil<<RESET>>.

### function str:size(): int
Returns the length of the string.

### function str:at(index: int): int
Returns the character at <<WHITE>>index<<RESET>> in the string.
If the index is out of bounds for the string, an <<WHITE>>IndexOutOfBoundsException<<RESET>> is thrown.

### function str:reverse(): str
Returns a new string that is the original string reversed.

### function str:toChars(): Array
Returns an array containing all characters of the string in order.

### function str:startsWith(_s_: str): bool
Returns <<BLUE>>true<<RESET>> if the string starts with _s_.

### function str:view(): [int8]
Returns a copy of the underlying cstring.

### function str:hashCode(): int
Returns the hash of the string.

### function str:split(_delim_: str): Array
Splits this string at every occurence of <<WHITE>>_delim_<<RESET>> and returns an array containing the results.
Returns an empty array if the string does not contain <<WHITE>>_delim_<<RESET>>.

@std.util.Pair
## Pair
### static function Pair::new(a: any, b: any): none
Create a new pair of <<WHITE>>a<<RESET>> and <<WHITE>>b<<RESET>>.

### function Pair:toString(): str
Returns a string representation of this pair.

@std.util.Triple
## Triple
### static function Triple::new(a: any, b: any, c: any): none
Create a new triple of <<WHITE>>a<<RESET>>, <<WHITE>>b<<RESET>> and <<WHITE>>c<<RESET>>.

### function Triple:toString(): str
Returns a string representation of this triple.

@std.util.Range
## Ranges
### static function Range::new(_start: int, _end: int): none
Create a new Range object from <<WHITE>>_start<<RESET>> to <<WHITE>>_end<<RESET>> counting up.

### function Range:containsRange(other: Range): int
Returns <<BLUE>>true<<RESET>> if <<WHITE>>other<<RESET>> lies completely within the range.
Returns <<BLUE>>true<<RESET>> if both ranges are equal.

### function Range:overlaps(other: Range): int
Returns <<BLUE>>true<<RESET>> if <<WHITE>>other<<RESET>> is partially contained within the range.
For example, a Range from 2 to 7 will overlap with a Range from 4 to 10.

### function Range:contains(pos: int): int
Returns <<BLUE>>true<<RESET>> if <<WHITE>>pos<<RESET>> is contained within the range.
For example, on a Range from 1 to 5, this method will return <<BLUE>>true<<RESET>> for all numbers from 1 to 5, both including.

### function Range:toReverseRange(): ReverseRange
Convert range to a <<WHITE>>ReverseRange<<RESET>> object.
For example, a range from 1 to 5 will return a <<WHITE>>ReverseRange<<RESET>> object from 5 to 1.

@std.util.ReverseRange
### static function ReverseRange::new(_start: int, _end: int): none
Create a new ReverseRange object from <<WHITE>>_start<<RESET>> to <<WHITE>>_end<<RESET>> counting down.

### function ReverseRange:toRange(): Range
Convert reverse range to a <<WHITE>>Range<<RESET>> object.
For example, a reverse range from 5 to 1 will return a <<WHITE>>Range<<RESET>> object from 1 to 5.

@std.SclObject
## SclObject
### function SclObject:toString(): str
Returns a string representation of this object.

### function SclObject:==(other: SclObject): bool
Returns true if the objects are equal.
This method should be redefined by Structs as the default implementation returns the pointer equality.

### function SclObject:equals(other: SclObject): bool
Returns true if the objects are equal.
This method should be redefined by Structs as the default implementation returns the pointer equality.

### function SclObject:clone(): SclObject
Returns a copy of this object.

### function SclObject:hashCode(): SclObject
Returns the hash of this object.
This method should be redefined by Structs as the default implementation returns the hash of the type name.

@std.threading.Thread
## Thread
### static decl Thread::mainThread: readonly Thread
A reference to the main thread.

### static function Thread::currentThread(): Thread
Returns a reference to the current thread.

### static function Thread::stackTrace(): Array
Returns the stack trace of the current thread.

### static function Thread::new(func: lambda(): none): none
Creates a new Thread object.

### function Thread:start(): none
Starts the thread.
If the thread has already been started, and <<WHITE>>Thread<<BLUE>>:<<WHITE>>join<<RESET>> has not been called on this thread yet, a <<WHITE>>ThreadException<<RESET>> is thrown.

### function Thread:join(): none
Blocks the calling thread until the thread finishes execution.
If <<WHITE>>Thread<<BLUE>>:<<WHITE>>join<<RESET>> gets called more than once a <<WHITE>>ThreadException<<RESET>> is thrown.

### function Thread:equals(other: Thread): bool
Returns true, if both threads represent the same pthread instance.

### function Thread:==(other: Thread): bool
Returns true, if both threads represent the same pthread instance.

@std.debug
## Exception
### struct Exception
Member types:
- <<WHITE>>msg<<BLUE>>: str<<RESET>>
- <<WHITE>>stackTrace<<BLUE>>: const <<WHITE>>Array<<RESET>>
- <<WHITE>>errnoStr<<BLUE>>: readonly str<<RESET>>

<<WHITE>>msg<<RESET>>: Contains the exception message.
<<WHITE>>stackTrace<<RESET>>: Contains the stack trace.
<<WHITE>>errnoStr<<RESET>>: Contains the string representation of errno at the time of initialization.

### function Exception:printStackTrace(): none
Prints the stack trace of this exception to stderr.

### function Exception::new(): none
Creates a new exception.

## InvalidSignalException
### struct InvalidSignalException : Exception
Member types inherited from <<WHITE>>Exception<<RESET>>.
This exception is only thrown when calling <<WHITE>>setSignalHandler<<RESET>> with an invalid signal number.

### function InvalidSignalException::new(signal: int): none
Creates a new InvalidSignalException with the signal <<WHITE>>signal<<RESET>>.
This exception is only thrown when calling <<WHITE>>setSignalHandler<<RESET>> with an invalid signal number.

## Error
### struct Error : Exception
Member types inherited from <<WHITE>>Exception<<RESET>>.
Errors are not catchable in a try-catch and will always throw to the first try block (the try block in native code surrounding the call to <<WHITE>>main<<RESET>>).

### function Error::new(message: str): none
Creates a new Error with the given message.

## AssertError
### struct AssertError : Error
Member types inherited from <<WHITE>>Error<<RESET>>.
This error is only thrown when an assertion failed.

## CastError
### struct CastError : Error
Member types inherited from <<WHITE>>Error<<RESET>>.
This error is thrown when a cast fails.

## Debug
### function trace(): none
Prints the current stack trace to stdout.

### function dumpStack(): none
Prints a stack dump.

### function raise(_sig_: int): none
Raises the signal <<WHITE>>_sig_<<RESET>>.

### function throw(ex: Exception): none
Throws an exception by jumping to the next outermost <<BLUE>>catch<<RESET>> block.

### function sysPrettyString(): str
Returns a string containing the OS name and architecture.

### function setSignalHandler(handlerFun: lambda(int): none, signal: int): none
Sets the signal handler for the given signal.

### function resetSignalHandler(sig: int): none
Resets the signal handler for the given signal to the default signal handler.

@std.io
## ConsoleColor
### static function ConsoleColor::reset(): str
Returns the ANSI escape code to reset the color.

### static function ConsoleColor::black(): str
Returns the ANSI escape code for the color black.

### static function ConsoleColor::red(): str
Returns the ANSI escape code for the color red.

### static function ConsoleColor::green(): str
Returns the ANSI escape code for the color green.

### static function ConsoleColor::yellow(): str
Returns the ANSI escape code for the color yellow.

### static function ConsoleColor::blue(): str
Returns the ANSI escape code for the color blue.

### static function ConsoleColor::magenta(): str
Returns the ANSI escape code for the color magenta.

### static function ConsoleColor::cyan(): str
Returns the ANSI escape code for the color cyan.

### static function ConsoleColor::white(): str
Returns the ANSI escape code for the color white.

### static function ConsoleColor::bold(): str
Returns the ANSI escape code for the color bold.

## FmtIO
### static function FmtIO::puts(fmt: str): none
Prints a formatted string to the console.
Format specifiers:
- <<GREEN>>"%s"<<RESET>>: format <<BLUE>>str<<RESET>>
- <<GREEN>>"%i"<<RESET>>: format <<BLUE>>int<<RESET>>
- <<GREEN>>"%f"<<RESET>>: format <<BLUE>>float<<RESET>>

@std.util.Map
## Map
### static function Map::new(size: int): none
Creates a new Map with a starting capacity of <<WHITE>>size<<RESET>> elements.

### function Map:get(key: str): any?
Returns the value for the key in the map.
Returns <<BLUE>>nil<<RESET>> if the key has no mapping.

### function Map:set(key: str, value: any): none
Sets the value for the key in the map.
If the key is in the map already, it's value will be updated.

### function Map:toString(): str
Returns a string representation of this map.

### function Map:map(x: lambda(MapEntry): none): none
Executes the lambda x for each entry in the map.

### struct MapEntry
Member types:
- <<WHITE>>key<<BLUE>>: str<<RESET>>
- <<WHITE>>value<<BLUE>>: any<<RESET>>

<<WHITE>>key<<RESET>>: The key for this map entry.
<<WHITE>>value<<RESET>>: The value of this map entry.

### static function MapEntry::new(key: str, value: any): none
Creates a new map entry with the given key and value.

### function MapEntry:toString(): str
Returns a string representation of this map entry.

@std.util.Cloneable
## Cloneable
### interface ICloneable
Implementing this interface indicates that instances of this struct may be copied.

### function ICloneable:clone(): ?
The interface method to implement for cloning, where <<BLUE>>?<<RESET>> represents this struct.

@std.util.Equatable
## Equatable
### interface IEquatable
Implementing this interface indicates that instances of this struct implement a custom equality check.

### function IEquatable:equals(other: ?): bool
Implementations of this interface method should return <<BLUE>>true<<RESET>> if both instances are equivalent.
The <<BLUE>>?<<RESET>> should represent the same type as the implementing struct.

### function IEquatable:==(other: ?): bool
Implementations of this interface method should return <<BLUE>>true<<RESET>> if both instances are equivalent.
The <<BLUE>>?<<RESET>> should represent the same type as the implementing struct.

@std.util.Hashable
## Hashable
### interface IHashable
Implementing this interface indicates that instances of this struct implement a custom hashCode method.

### function IHashable:hashCode(): int
Implementations of this interface method should return a hash code value.

@std.util.Iterable
## Iterable
### interface IIterable
Implementing this interface enables it to be used in a <<BLUE>>foreach<<RESET>>-loop

### function IIterable:begin(): none
Implementations of this interface method should set the instance up to be iterated.

### function IIterable:hasNext(): bool
Implementations of this interface method should return <<BLUE>>true<<RESET>>, if <<WHITE>>next<<RESET>> would return a valid value.

### function IIterable:next(): ?
Implementations of this interface method should return the next value in the iteration.
The <<BLUE>>?<<RESET>> should represent a meaningful type for the iteration.

@std.util.Stringifyable
## Stringifyable
### interface IStringifyable
Implementing this interface indicates that instances of this struct implement a custom <<WHITE>>toString<<RESET>> method.

### function IStringifyable:toString(): str
Implementations of this interface method should return a meaningful string representation of the instance.
