@std.functional.Do
@@{frameworkPath}/include/std/functional/Do.scale
## Filters
### static function Filters::all(_: int): bool
Does not filter out any elements.

### static function Filters::positive(val: int): bool
Filters out elements less than or equal to zero.

### static function Filters::negative(val: int): bool
Filters out elements greater than or equal to zero.

### static function Filters::even(val: int): bool
Filters out odd elements.

### static function Filters::odd(val: int): bool
Filters out even elements.

### static function Filters::zero(val: int): bool
Filters out non-zero elements.

### static function Filters::nonZero(val: int): bool
Filters out zero elements.

## Maps
### static function Maps::identity(_: int): int
Returns each element unchanged.

### static function Maps::square(val: int): int
Returns the square of each element.

### static function Maps::cube(val: int): int
Returns the cube of each element.

### static function Maps::double(val: int): int
Returns the double of each element.

### static function Maps::triple(val: int): int
Returns the triple of each element.

### static function Maps::half(val: int): int
Returns one half of each element.

### static function Maps::third(val: int): int
Returns one third of each element.

### static function Maps::negate(val: int): int
Returns the negation of each element.

### static function Maps::abs(val: int): int
Returns the absolute value of each element.

### static function Maps::sign(val: int): int
Returns the sign value of each element. 1 for positive, -1 for negative, 0 for zero.

### static function Maps::incr(val: int): int
Returns each element plus one.

### static function Maps::decr(val: int): int
Returns each element minus one.

## Reducers
### static function Reducers::sum(acc: int, val: int): int
Returns the sum of the accumulator and the element.

### static function Reducers::product(acc: int, val: int): int
Returns the product of the accumulator and the element.

### static function Reducers::min(acc: int, val: int): int
Returns the smallest non-zero element.

### static function Reducers::max(acc: int, val: int): int
Returns the largest non-zero element.

### static function Reducers::avg(acc: int, val: int): int
Returns the average of the accumulator and the element.

### static function Reducers::count(acc: int, val: int): int
Returns the number of elements.

### static function Reducers::some(acc: int, val: int): int
Returns the number of elements that are not zero.

### static function Reducers::first(acc: int, val: int): int
Returns the first non-zero element.

### static function Reducers::last(acc: int, val: int): int
Returns the last non-zero element.

## Counters
### static function Counters::all(_: int): bool
Counts the number of elements.

### static function Counters::positive(val: int): bool
Counts the number of positive elements.

### static function Counters::negative(val: int): bool
Counts the number of negative elements.

### static function Counters::even(val: int): bool
Counts the number of even elements.

### static function Counters::odd(val: int): bool
Counts the number of odd elements.

### static function Counters::zero(val: int): bool
Counts the number of zero elements.

### static function Counters::nonZero(val: int): bool
Counts the number of non-zero elements.

## Transformers
### static function Transformers::partialSum(arr: [int8] | [int16] | [int32] | [int64] | [int] | [uint8] | [uint16] | [uint32] | [uint64] | [uint]): [int]
Returns the partial sum of the elements by calculating the sum of the first n elements where n is the index of current element plus one.

### static function Transformers::partialProduct(arr: [int8] | [int16] | [int32] | [int64] | [int] | [uint8] | [uint16] | [uint32] | [uint64] | [uint]): [int]
Returns the partial product of the elements by calculating the product of the first n elements where n is the index of current element plus one.

### static function Transformers::partialMin(arr: [int8] | [int16] | [int32] | [int64] | [int] | [uint8] | [uint16] | [uint32] | [uint64] | [uint]): [int]
Returns the partial minimum of the elements by calculating the minimum of the first n elements where n is the index of current element plus one.

### static function Transformers::partialMax(arr: [int8] | [int16] | [int32] | [int64] | [int] | [uint8] | [uint16] | [uint32] | [uint64] | [uint]): [int]
Returns the partial maximum of the elements by calculating the maximum of the first n elements where n is the index of current element plus one.
