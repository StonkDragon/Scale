@std.util.Range
@@{frameworkPath}/include/std/util/Range.scale
## Util: Range
### final struct Range is Iterable
The struct `Range` represents a range of integers.
Declared Fields:
- `lower: int` - The lower bound of the range.
- `upper: int` - The upper bound of the range.

### static function Range::new(theStart: int, theEnd: int): Range
Returns a new instance of `Range` with the lower bound `theStart` and the upper bound `theEnd`.
Alternatively, you can use the `to` operator to create a new range:
`(1 to 10)`

### function Range:containsRange(other: Range): int
Returns true if `other` is contained in `self`.

### function Range:overlaps(other: Range): int
Returns true if `other` overlaps with `self`.

### function Range:contains(pos: int): int
Returns true if `pos` is contained in `self`.

### function Range:toString(): str
Returns a string representation of this `Range` instance.

### function Range:iterate(): Iterator
Returns an iterator over the values of `self`.

### function Range:toReverseRange(): ReverseRange
Returns a reversed copy of `self`.

### function Range:toList(): [int]
Returns a list of the values of `self`.

### final struct ReverseRange is Iterable
The struct `ReverseRange` represents a reversed range of integers.
Declared Fields:
- `lower: int` - The lower bound of the range.
- `upper: int` - The upper bound of the range.

### static function ReverseRange::new(theStart: int, theEnd: int): ReverseRange
Returns a new instance of `ReverseRange` with the lower bound `theStart` and the upper bound `theEnd`.

### function ReverseRange:toString(): str
Returns a string representation of this `ReverseRange` instance.

### function ReverseRange:iterate(): Iterator
Returns an iterator over the values of `self`.

### function ReverseRange:toRange(): Range
Returns a copy of `self`.

### function ReverseRange:toList(): [int]
Returns a list of the values of `self`.

### struct RangeIterator is Iterator
The struct `RangeIterator` is an iterator over the values of a range.

### static function RangeIterator::new(theRange: Range): RangeIterator
Returns a new instance of `RangeIterator` that iterates over the values of `theRange`.

### function RangeIterator:hasNext(): bool
Returns true if there are more values to iterate over.

### function RangeIterator:next(): int
Returns the next value in the range.

### struct ReverseRangeIterator is Iterator
The struct `ReverseRangeIterator` is an iterator over the values of a reversed range.

### static function ReverseRangeIterator::new(theRange: ReverseRange): ReverseRangeIterator
Returns a new instance of `ReverseRangeIterator` that iterates over the values of `theRange`.

### function ReverseRangeIterator:hasNext(): bool
Returns true if there are more values to iterate over.

### function ReverseRangeIterator:next(): int
Returns the next value in the range.

### struct UnboundRange is Iterable
The struct `UnboundRange` represents an unbound range of integers.
Unbound ranges are used to represent infinite ranges (from `int::minValue` to `int::maxValue`).

### static function UnboundRange::new(): UnboundRange
Returns a new instance of `UnboundRange`.
Alternatively, you can use the `to` operator to create a new unbound range:
`(to)`

### function UnboundRange:toString(): str
Returns a string representation of this `UnboundRange` instance.

### function UnboundRange:iterate(): Iterator
Returns an iterator over the values of `self`.

### struct UnboundRangeIterator is Iterator
The struct `UnboundRangeIterator` is an iterator over the values of an unbound range.

### static function UnboundRangeIterator::new(): UnboundRangeIterator
Returns a new instance of `UnboundRangeIterator`.

### function UnboundRangeIterator:hasNext(): bool
Returns true if there are more values to iterate over.

### function UnboundRangeIterator:next(): int
Returns the next value in the range.

### struct PartialRange is Iterable
The struct `PartialRange` represents a one-sided range of integers.

### static function PartialRange::lowerBound(bound: int): PartialRange
Returns a new instance of `PartialRange` with the lower bound `bound`.
Alternatively, you can use the `to` operator to create a new partial range:
`(1 to)`

### static function PartialRange::upperBound(bound: int): PartialRange
Returns a new instance of `PartialRange` with the upper bound `bound`.
Alternatively, you can use the `to` operator to create a new partial range:
`(to 10)`

### function PartialRange:toString(): str
Returns a string representation of this `PartialRange` instance.

### function PartialRange:iterate(): Iterator
Returns an iterator over the values of `self`.
