import std.math

expect final sealed struct str is Iterable
  decl data: readonly [int8]
  decl length: readonly int
  decl hash: readonly uint

  expect function +(:str): str
  expect function +(:[int8]): str
  expect function +(:int): str
  expect function +(:float): str
  expect function clone(): str
  expect function append(other: str): str
  expect function append(cStr: [int8]): str
  expect function prepend(other: str): str
  expect function prepend(cStr: [int8]): str
  expect function equals(other: any): bool
  expect function ==(other: any): bool
  expect function !=(other: any): bool
  expect function size(): int
  expect function at(i: int): int
  expect function indexOf(c: int8): int
  expect function indexOf(s: str): int
  expect function lastIndexOf(c: int8): int
  expect function contains(c: int8): bool
  expect const function toString(): str
  deprecated![since: "24.2.0", replacement: "str:[]", forRemoval: true]
  expect function @(i: int): int
  expect function [](index: int): int8
  expect function reverse(): str
  deprecated![since: "24.2.0", replacement: "str:view", forRemoval: true]
  expect function toChars() _arr_: Array
  expect function trim(): str
  expect function split(delim: str): [str]
  expect function startsWith(string: str): bool
  expect function endsWith(string: str): bool
  expect function subString(start: int): str
  expect function subString(range: Range): str
  expect function view(): [int8]
  expect function init(data: [int8]): none
  expect function init(data: [int8], n: int): none
  expect function init(): none
  expect function iterate(): StringIterator
  expect function hashCode(): int
  expect function utfLength(): int
  expect static function format(fmt: str, args: varargs): str
  expect static function vformat(fmt: str, args: [any]): str
  expect static function =>(:[int8]): str
  expect static function of(data: [int8]): str
  expect static function filter(arr: str, f: lambda(int8): bool): str
  expect static function map(arr: str, f: lambda(int8): int8): str

  static reified function map<lambda(int8): U>(arr: str, f: lambda(int8): U): [U]
    new<U>[arr:size] => decl result: [U]
    for i in 0 to arr:size do
      arr[i] f:accept => result[i]
    done
    result return
  end

  expect static function reduce(arr: str, f: lambda(int, int8): int): int
  expect static function count(arr: str, f: lambda(int8): bool): int
  expect static function each(arr: str, f: lambda(int8): none): none
  expect static function also(arr: str, f: lambda(int8): none): str

  static reified function transform<lambda(str): U>(arr: str, f: lambda(str): U): U
    arr f:accept return
  end
end

expect final sealed struct StringIterator is Iterator
  private decl _str: str
  private decl _pos: int

  expect function init(s: str): none
  expect function next(): int8
  expect function hasNext(): bool
end

expect function +(s: str, i: int): str
expect function +(s: str, f: float): str
