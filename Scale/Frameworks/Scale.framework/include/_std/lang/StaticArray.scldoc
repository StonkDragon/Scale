
@std
@@{frameworkPath}/include/std/lang/StaticArray.scale
## StaticArray
### layout StaticArray<Type, Size>
The layout `StaticArray` represents a fixed size array of type `Type` with `Size` elements.

### function StaticArray<Type, Size>:[](at: int): Type
Returns the value at index `at`.
Throws an `IndexOutOfBoundsException` if `at` is out of bounds.

### function StaticArray<Type, Size>:=>[](at: int, val: Type): none
Sets the value at index `at` to `val`.
Throws an `IndexOutOfBoundsException` if `at` is out of bounds.

### function StaticArray<Type, Size>:fill(arr: [Type]): none
Fills this array with the contents of `arr`.
`arr` must have the same size as `self`, otherwise an `InvalidArgumentException` is thrown.

### function StaticArray<Type, Size>:copyInto(arr: [Type]): StaticArray<Type, Size>
Calls `fill` and then returns `self`.
`arr` must have the same size as `self`, otherwise an `InvalidArgumentException` is thrown.

### function StaticArray<Type, Size>:iterate(): StaticArrayIterator<Type, Size>
Returns an iterator over the values of this `StaticArray`.

### struct StaticArrayIterator<Type, Size>
The struct `StaticArrayIterator` is an iterator over the values of a `StaticArray`.

### static function StaticArrayIterator<Type, Size>::new(arr: StaticArray<Type, Size>): StaticArrayIterator<Type, Size>
Returns a new instance of `StaticArrayIterator` that iterates over the values of `arr`.

### function StaticArrayIterator<Type, Size>:hasNext(): bool
Returns true if there are more values to iterate over.

### function StaticArrayIterator<Type, Size>:next(): Type
Returns the next value in the array.

### function arrayToStaticArray<Type, Size>(arr: [Type]): StaticArray<Type, Size>
Returns a new `StaticArray` from the given array `arr`.

### function staticArrayOf<Type, Size>(args: varargs): StaticArray<Type, Size>
Returns a new `StaticArray` from the given values.
