import Scale.runtime.method
import Scale.util.immutablearray

sealed struct Struct
    private decl type:         const int
    private decl name:         const str
    private decl size:         const int
    private decl super:        const int
    private decl methodsCount: const int
    private decl methods:      const [Method]

    function getMethods(): ImmutableArray
        methodsCount methods ImmutableArray::new return
    end

    function getMethod(name: str): Method?
        getMethods => decl methods: ImmutableArray
        foreach method in methods do
            inline_c
                _scl_add_struct(*method);
            end_inline
            if method as Method :getName name == then
                method return
            fi
        done
        nil return
    end

    function getName(): str
        name return
    end

    function getType(): int
        type return
    end

    function getSuperStruct(): Struct?
        if "SclObject" name == then
            nil return
        fi
        super Reflect::getStructByType return
    end

    function getRealSize(): int
        size return
    end

    function getSize(): int
        size sizeof int 4 * - return
    end

    function newInstance() instance: SclObject
        inline_c
            *instance = _scl_alloc_struct((*self)->size, (*self)->name, (*self)->super);
        end_inline

        name ":init" + self:getMethod => decl initializer: Method?
        if initializer then
            instance initializer!!:invoke
        fi
        return
    end
end
