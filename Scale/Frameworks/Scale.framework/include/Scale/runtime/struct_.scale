import Scale.runtime.method
import Scale.util.array

import Scale.debug

sealed struct Struct
    decl _type:         const int
    decl _name:         const str
    decl _size:         const int
    decl _super:        const int
    decl _methodsCount: const int
    decl _methods:      const [Method]

    function getMethods(): Array
        _methodsCount _methods Array::fromPointerCollection return
    end

    function getMethod(name: str): Method
        getMethods => decl methods: Array
        foreach method in methods do
            inline_c
                scl_add_struct(*method);
            end_inline
            if method as Method :getName name == then
                method return
            fi
        done
        nil return
    end

    function getName(): str
        _name return
    end

    function getType(): int
        _type return
    end

    function getSuperStruct(): Struct
        if "SclObject" _name == then
            nil return
        fi
        _super Reflect::getStructByType return
    end

    function getRealSize(): int
        _size return
    end

    function getSize(): int
        _size sizeof int 4 * - return
    end

    function newInstance() instance: SclObject
        inline_c
            *instance = scl_alloc_struct((*self)->_size, (*self)->_name, (*self)->_super);
        end_inline

        _name ":init" + self:getMethod => decl initializer: Method
        if initializer then
            instance initializer:invoke
        fi
        return
    end
end
