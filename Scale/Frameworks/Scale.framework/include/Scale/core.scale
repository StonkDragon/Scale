import Scale.sclobject
import Scale.io
import Scale.types
import Scale.util.array

expect function memset(ptr: [any], val: int, len: int): [any]
expect function memcpy(dst: [any], src: [any], n: int): [any]
cdecl "ctrl_stack_size"
expect function sizeofStack(): int
cdecl "_scl_sleep"
expect function sleep(_millis_: int): none

cdecl "system"
expect function __c_system(cmd: [int8]): int
cdecl "getenv"
expect function __c_getenv(cmd: [int8]): [int8]?
cdecl "strdup"
expect function __c_strdup(s: [int8]): [int8]
cdecl "strtok"
expect function __c_strtok(s: any, delim: [int8]): [int8]?
cdecl "atoll"
expect function __c_atoll(s: [int8]): int
cdecl "atof"
expect function __c_atof(s: [int8]): float

expect function _scl_alloc(_sz_: int): [any]?
expect function _scl_realloc(_ptr_: [any], _sz_: int): [any]?
expect function _scl_free(_ptr_: [any]): none

function system(_cmd_: str): int
  _cmd_:view __c_system return
end

function getenv(_key_: str): str?
  _key_:view __c_getenv => decl ptr
  if ptr then
    ptr!! str::new return
  fi
  nil return
end

function malloc(_size_: int) s: [any]?
  _size_ _scl_alloc => s
  if s ! then
    c!
      _scl_security_throw(EX_BAD_PTR, "malloc() failed!");
    end
  fi
  return
end

function realloc(_size_: int, _ptr_: [any]): [any]?
  _ptr_ _size_ _scl_realloc => _ptr_
  if _ptr_ ! then
    c!
      _scl_security_throw(EX_BAD_PTR, "realloc() failed!");
    end
  fi
  _ptr_ return
end

function free(_ptr_: [any]): none
  _ptr_ _scl_free
end

function time(): float
  decl secs: float
  c!
    struct timeval tv;
    gettimeofday(&tv, NULL);
    *secs = (scl_float)(tv.tv_usec) / 1000000 + (scl_float)(tv.tv_sec);
  end
  secs return
end

function longToString(_long_: int): str
  25 malloc => decl out: [int8]
  c!
	  sprintf(*out, SCL_INT_FMT, *_long_);
  end
  out str::new return
end

function stringToLong(_str_: str): int
  _str_:view __c_atoll return
end

function stringToDouble(_str_: str): float
  _str_:view __c_atof return
end

function doubleToString(_double_: float): str
  100 malloc => decl out: [int8]
  c!
	  sprintf(*out, "%f", *_double_);
  end
  out str::new return
end

function nop(): none
  0 sleep
end

function toChar(_val_: int): int
  _val_ 0xff & return
end

function toInt(_val_: int): int
  _val_ 0xffffffff & return
end

function toShort(_val_: int): int
  _val_ 0xffff & return
end

function isnil(x: any): bool
  x nil == return
end

function isnotnil(x: any): bool
  x nil != return
end
