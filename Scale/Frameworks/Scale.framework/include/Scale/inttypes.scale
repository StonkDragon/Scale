typealias int64 "scl_int64"
typealias int32 "scl_int32"
typealias int16 "scl_int16"
typealias int8 "scl_int8"
typealias uint64 "scl_uint64"
typealias uint32 "scl_uint32"
typealias uint16 "scl_uint16"
typealias uint8 "scl_uint8"
typealias lambda "_scl_lambda"

construct function inttypes_scale_init(): none
  0x80 => int8::minValue
  0x7f => int8::maxValue
  0x8000000000000000 => int::minValue
  0x7fffffffffffffff => int::maxValue
end

final static sealed struct int8
  decl minValue: const int8
  decl maxValue: const int8

  function toString(x: int8): str
    2 malloc => decl out: [int8]
    c!
      sprintf(*out, "%c", *x);
    end
    out str::new return
  end
end

final static sealed struct int
  decl minValue: const int
  decl maxValue: const int

  function toString(x: int): str
    25 malloc => decl out: [int8]
    c!
      sprintf(*out, SCL_INT_FMT, *x);
    end
    out str::new return
  end

  function toHexString(x: int): str
    19 malloc => decl out: [int8]
    c!
      sprintf(*out, SCL_PTR_HEX_FMT, *x);
    end
    out str::new return
  end

  function parse(s: str): int
    s:view __c_atoll as int return
  end

  function toInt8(_val_: any): int8
    _val_ as int8 return
  end

  function toInt16(_val_: any): int16
    _val_ as int16 return
  end

  function toInt32(_val_: any): int32
    _val_ as int32 return
  end

  function toInt(_val_: any): int
    _val_ as int return
  end

  function toUInt8(_val_: any): uint8
    _val_ as uint8 return
  end

  function toUInt16(_val_: any): uint16
    _val_ as uint16 return
  end

  function toUInt32(_val_: any): uint32
    _val_ as uint32 return
  end

  function toUInt(_val_: any): uint
    _val_ as uint return
  end

  function isValidInt8(val: any): bool
    val val int::toInt8 == return
  end

  function isValidInt16(val: any): bool
    val val int::toInt16 == return
  end

  function isValidInt32(val: any): bool
    val val int::toInt32 == return
  end

  function isValidUInt8(val: any): bool
    val val int::toUInt8 == return
  end

  function isValidUInt16(val: any): bool
    val val int::toUInt16 == return
  end

  function isValidUInt32(val: any): bool
    val val int::toUInt32 == return
  end
end

deprecated![since: "23.5", replacement: "int::toInt8"]
function toInt8(_val_: any): int8
  _val_ int::toInt8 return
end

deprecated![since: "23.5", replacement: "int::toInt16"]
function toInt16(_val_: any): int16
  _val_ int::toInt16 return
end

deprecated![since: "23.5", replacement: "int::toInt32"]
function toInt32(_val_: any): int32
  _val_ int::toInt32 return
end

deprecated![since: "23.5", replacement: "int::toInt"]
function toInt(_val_: any): int
  _val_ int::toInt return
end

deprecated![since: "23.5", replacement: "int::toUInt8"]
function toUInt8(_val_: any): uint8
  _val_ int::toUInt8 return
end

deprecated![since: "23.5", replacement: "int::toUInt16"]
function toUInt16(_val_: any): uint16
  _val_ int::toUInt16 return
end

deprecated![since: "23.5", replacement: "int::toUInt32"]
function toUInt32(_val_: any): uint32
  _val_ int::toUInt32 return
end

deprecated![since: "23.5", replacement: "int::toUInt"]
function toUInt(_val_: any): uint
  _val_ int::toUInt return
end

deprecated![since: "23.5", replacement: "int::isValidInt8"]
function isValidInt8(val: any): bool
  val int::isValidInt8 return
end

deprecated![since: "23.5", replacement: "int::isValidInt16"]
function isValidInt16(val: any): bool
  val int::isValidInt16 return
end

deprecated![since: "23.5", replacement: "int::isValidInt32"]
function isValidInt32(val: any): bool
  val int::isValidInt32 return
end

deprecated![since: "23.5", replacement: "int::isValidUInt8"]
function isValidUInt8(val: any): bool
  val int::isValidUInt8 return
end

deprecated![since: "23.5", replacement: "int::isValidUInt16"]
function isValidUInt16(val: any): bool
  val int::isValidUInt16 return
end

deprecated![since: "23.5", replacement: "int::isValidUInt32"]
function isValidUInt32(val: any): bool
  val int::isValidUInt32 return
end

function isnil(x: any): bool
  x nil == return
end

function isnotnil(x: any): bool
  x nil != return
end
