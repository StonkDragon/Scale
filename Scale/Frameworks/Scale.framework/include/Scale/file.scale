typealias __c_file "FILE*"

final struct File
  private decl _name: str
  private decl _file: __c_file

  function init(name: str): none
    unsafe
      name:view "ab+":view File::__c_fopen => self._file
    end
    name => self._name
  end

  function name(): str
    self._name return
  end

  function close(): none
    unsafe
      _file File::__c_fclose
    end
  end

  function append(s: str): none
    unsafe
      s:view 1 s:size _file File::__c_fwrite
    end
  end

  function puts(s: any): none
    s builtinToString => decl val: str
    val self:append
    "\n" self:append
  end

  function writeBinary(buf: any, sz: int): none
    unsafe
      buf 1 sz _file File::__c_fwrite
    end
  end

  function read(sz: int): any
    sz malloc => decl buffer: [any]?
    unsafe
      buffer 1 sz _file File::__c_fread
    end
    buffer return
  end

  function offsetFromBegin(offset: int): none
    unsafe
      _file offset 0 File::__c_fseek
    end
  end

  function offsetFromEnd(offset: int): none
    unsafe
      _file offset 2 File::__c_fseek
    end
  end

  function offset(offset: int): none
    unsafe
      _file offset 1 File::__c_fseek
    end
  end

  function fileno(): int
    unsafe
      _file File::__c_fileno return
    end
  end

  function pos(): int
    unsafe
      _file File::__c_ftell return
    end
  end

  function delete(): bool
    unsafe
      self._name:view __c_remove 0 == return
    end
  end

  function create(): none
    "" self:append
  end

  static function exists(f: str): bool
    unsafe
      f:view "r":view File::__c_fopen nil != return
    end
  end

  static expect cdecl "fopen"  function __c_fopen(fileName: [int8], mode: [int8]): __c_file?
  static expect cdecl "fwrite" function __c_fwrite(buffer: any, elemSize: int, numElems: int, filePtr: __c_file): none
  static expect cdecl "fread"  function __c_fread(buffer: any, numElems: int, elemSize: int, filePtr: __c_file): none
  static expect cdecl "fclose" function __c_fclose(filePtr: __c_file): none
  static expect cdecl "ftell"  function __c_ftell(filePtr: __c_file): int
  static expect cdecl "fileno" function __c_fileno(filePtr: __c_file): int
  static expect cdecl "remove" function __c_remove(fileName: [int8]): int
  static expect cdecl "fseek"  function __c_fseek(filePtr: __c_file, offset: int, _whence_: int): none
end

deprecated![since: "23.5", replacement: "File::new", forRemoval: true]
function fopen(fileName: str, mode: str): __c_file?
  fileName:view mode:view File::__c_fopen return
end

deprecated![since: "23.5", replacement: "File:writeBinary", forRemoval: true]
function fwrite(buffer: any, elemSize: int, filePtr: __c_file): none
  buffer 1 elemSize filePtr File::__c_fwrite
end

deprecated![since: "23.5", replacement: "File:append", forRemoval: true]
function fwrites(buffer: str, elemSize: int, filePtr: __c_file): none
  buffer:view 1 elemSize filePtr File::__c_fwrite
end

deprecated![since: "23.5", replacement: "File:puts", forRemoval: true]
function fputs(filePtr: __c_file, _str_: str): none
  _str_:view 1 _str_:size filePtr File::__c_fwrite
  "\n":view 1 1 filePtr File::__c_fwrite
end

deprecated![since: "23.5", forRemoval: true]
function fputint(filePtr: __c_file, _int_: int): none
  filePtr _int_ int::toString fputs
end

deprecated![since: "23.5", forRemoval: true]
function fputfloat(filePtr: __c_file, _float_: float): none
  filePtr _float_ float::toString fputs
end

deprecated![since: "23.5", replacement: "File:read", forRemoval: true]
function fread(filePtr: __c_file, elemSize: int): [any]?
  elemSize malloc => decl buffer: [any]?
  buffer 1 elemSize filePtr File::__c_fread
  buffer return
end

deprecated![since: "23.5", replacement: "File:offsetFromBegin", forRemoval: true]
function fseekstart(filePtr: __c_file, offset: int): none
  filePtr offset 0 File::__c_fseek
end

deprecated![since: "23.5", replacement: "File:offsetFromEnd", forRemoval: true]
function fseekend(filePtr: __c_file, offset: int): none
  filePtr offset 2 File::__c_fseek
end

deprecated![since: "23.5", replacement: "File:offset", forRemoval: true]
function fseekcur(filePtr: __c_file, offset: int): none
  filePtr offset 1 File::__c_fseek
end
