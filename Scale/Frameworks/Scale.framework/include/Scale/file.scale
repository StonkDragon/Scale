typealias file "FILE*"

cdecl "fopen"
expect function __c_fopen(_name_: [int8], _mode_: [int8]): file?
cdecl "fwrite"
expect function __c_fwrite(_buf_: any, _size_: int, _num_elem_: int, _file_: file): none
cdecl "fread"
expect function __c_fread(_buf_: any, _num_elem_: int, _size_: int, _f_: file): none

expect function fclose(_file_: file): none
expect function ftell(_file_: file): int
expect function fileno(_file_: file): int
expect function fseek(_file_: file, _offset_: int, _whence_: int): none

function fopen(_filename_: str, _mode_: str): file?
  _filename_:view _mode_:view __c_fopen return
end

function fwrite(_buf_: any, _size_: int, _file_: file): none
  _buf_ 1 _size_ _file_ __c_fwrite
end

function fwrites(_buf_: str, _size_: int, _file_: file): none
  _buf_:view 1 _size_ _file_ __c_fwrite
end

function fputs(_file_: file, _str_: str): none
  _str_ _str_:size _file_ fwrites
  "\n" 1 _file_ fwrites
end

function fputint(_file_: file, _int_: int): none
  _file_ _int_ int::toString fputs
end

function fputfloat(_file_: file, _float_: float): none
  _file_ _float_ float::toString fputs
end

function fread(_f_: file, _size_: int): [any]?
  _size_ malloc => decl _buf_: [any]?
  _buf_ 1 _size_ _f_ __c_fread
  _buf_ return
end

function fseekstart(_f_: file, _offset_: int): none
  _f_ _offset_ 0 fseek
end

function fseekend(_f_: file, _offset_: int): none
  _f_ _offset_ 2 fseek
end

function fseekcur(_f_: file, _offset_: int): none
  _f_ _offset_ 1 fseek
end
