import std.util.Iterable
import std.debug

sealed struct ImmutableArray is IIterable
  decl values:      readonly [any]
  decl count:       readonly int
  decl capacity:    readonly int

  private decl pos: readonly int

  function get(index: int): any?
    if index 0 <= then self.values @ return fi
    self.values index 3 << + @ return
  end

  function top(): any?
    self.values self.count 1 - 3 << + @ return
  end

  function contains(val: any): bool
    for i in 0 to self.count do
      if i self:get val == then
        true return
      fi
    done
    false return
  end

  function init(count: int, values: [any]): none
    count => self.count
    count => self.capacity
    values => self.values
    0 => self.pos
  end

  function hasNext(): bool
    self.pos self.count < return
  end

  function next(): any?
    self.pos self:get
    self.pos 1 + => self.pos
    return
  end

  function toString() s: str
    if self.count 0 == then
      "{}" => s
    else
      "{" => s
      for i in 0 to self.count do
        i self:get => decl elem: any
        if i then
          s ", " + => s
        fi
        if elem is SclObject then
          s elem as SclObject :toString + => s
        else
          s elem as int longToString + => s
        fi
      done
      s "}" + => s
    fi
    return
  end

  function map(x: lambda(any): none): none
    foreach elem in self do
      elem x:accept
    done
  end
end
