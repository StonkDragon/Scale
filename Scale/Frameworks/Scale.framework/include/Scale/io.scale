cdecl "write"
expect unsafe function __c_write(fileDescriptor: int, cstr: [int8], _len_: int): int32
cdecl "read"
expect unsafe function __c_read(fileDescriptor: int, buffer: [int8], _n_: int): int32
cdecl "puts"
expect unsafe function __c_puts(cstr: [int8]): int32
cdecl "fprintf"
expect unsafe function __c_fprintf(fp: any, fmt: [int8], :varargs): int32
cdecl "printf"
expect unsafe function __c_printf(fmt: [int8], :varargs): int32

intrinsic cdecl "_scl_write" unsafe function write(fileDescriptor: int, string: str): none
  fileDescriptor string:view string:size __c_write drop
end

intrinsic cdecl "_scl_read" function read(fileDescriptor: int, _n_: int): str?
  _n_ malloc => decl buf: [int8]
  fileDescriptor buf _n_ __c_read drop
  buf str::new return
end

intrinsic cdecl "_scl_puts" function puts(value: any): none
  value:toString:view
  unsafe
    __c_puts drop
  end
end

intrinsic cdecl "_scl_eputs" function eputs(value: any): none
  unsafe
    c!
      _scl_push()->v = stderr;
    end
  end
  "%s\n":view

  value:toString:view
  unsafe
    __c_fprintf! 1
  end
  drop
end

function putint(number: int): none
  number puts
end

function putfloat(number: float): none
  number:toString puts
end

function throwerr(errorString: str): none
  Exception::new => decl e: mut Exception
  errorString => e.msg
  e throw
end
