import std.util.Stringifyable

cdecl "strlen"
expect unsafe function __c_strlen(_str_: [int8]): int
cdecl "strcmp"
expect unsafe function __c_strcmp(_str1_: [int8], _str2_: [int8]): int
cdecl "_scl_strdup"
expect unsafe function __c_strdup(_str_: [int8]): [int8]
cdecl "_scl_strncmp"
expect unsafe function __c_strncmp(_str1_: [int8], _str2_: [int8], _n_: int): int
cdecl "_scl_strcpy"
expect unsafe function __c_strcpy(dest: [int8], src: [int8]): [int8]

final sealed struct str is IEquatable, ICloneable, IStringifyable, IIterable
  private decl _data: [int8]
  private decl _len: int
  private decl _iter: int
  private decl _hash: int

  function +(other: str): str
    other self:prepend return
  end

  function clone(): str
    self._data str::new return
  end

  function append(other: str): str
    unsafe
      self._data other._data concat str::new return
    end
  end

  function prepend(other: str): str
    unsafe
      other._data self._data concat str::new return
    end
  end

  function equals(other: str): bool
    unsafe
      self._data other._data __c_strcmp 0 == return
    end
  end

  function ==(other: str): bool
    other self:equals return
  end

  function size(): int
    self._len return
  end

  function at(i: int): int
    if i 0 < i self:size >= || then
      "Index " i:toString +
      " is out of bounds for string with length " self:size:toString +
      +
      IndexOutOfBoundsException::new throw
    fi
    self._data i + @:toInt8 as int return
  end

  function toString(): str
    self return
  end

  function @(i: int): int
    i self:at return
  end

  function reverse(): str
    decl out: [int8]
    unsafe
      c!
        scl_int i = 0;
        scl_int len = strlen((*self)->_data);
        *out = _scl_alloc(len + 1);
        for (i = len - 1; i >= 0; i--) {
          (*out)[i] = (*self)->_data[len - i - 1];
        }
        (*out)[len] = '\0';
      end
    end
    out str::new
    out free
    return
  end

  function toChars() _arr_: Array
    self:size Array::new => _arr_

    for _i_ in 0 to self:size do
      _i_ self:at _arr_:push
    done
    return
  end

  function split(_delim_: str): Array
    10 Array::new => decl arr: Array
    self:view => decl string
    _delim_:view => decl cDelim
    unsafe
      string cDelim __c_strtok => decl line

      while line do
        line!! str::new arr:push
        nil cDelim __c_strtok => line
      done
    end

    string free
    cDelim free

    arr return
  end

  function startsWith(_s_: str): bool
    unsafe
      self._data _s_._data _s_:size __c_strncmp 0 == return
    end
  end

  function endsWith(_s_: str): bool
    if self._len _s_._len < then
      false return
    fi
    self._len _s_._len - self:subString => decl substr: str
    substr _s_ ==
    
    substr free

    return
  end

  function subString(start: int): str
    if start 0 == then
      self return
    fi
    if start self._len >= start 0 < || then
      "Index " start:toString +
      " is out of bounds for string with length " self:size:toString +
      +
      IndexOutOfBoundsException::new throw
    fi

    self._data => decl tmp: any

    tmp start + => tmp
    tmp as [int8] str::new return
  end

  function view(): [int8]
    unsafe
      self._data __c_strdup return
    end
  end

  function init(data: [int8]): none
    unsafe
      data __c_strdup => data
      data __c_strlen => self._len
    end
    data => self._data
    0 => self._iter
    data builtinHash => self._hash
  end

  function begin(): none
    0 => self._iter
  end

  function hasNext(): bool
    self._iter self._len < return
  end

  function next(): int8
    self._iter self @
    self._iter 1 + => self._iter
    return
  end

  function hashCode(): int
    self._hash return
  end

  private unsafe function concat(_str1_: [int8], _str2_: [int8]): [int8]
    decl out: [int8]
    _str1_ __c_strlen => decl len: int
    _str2_ __c_strlen => decl len2: int

    len len2 + 1 + malloc => out

    out _str1_ __c_strcpy drop
    c!
      strcat(*out, *_str2_);
    end

    out return
  end
end
