final sealed struct ThreadException : Exception
    function init(msg: str): none
        msg => self.msg
    end
end

final sealed struct AtomicOperationException : Exception
    function init(msg: str): none
        msg => self.msg
    end
end

typealias pthread_t "pthread_t"
typealias pthread_mutex_t "pthread_mutex_t"
typealias pthread_mutexattr_t "pthread_mutexattr_t"

cdecl "pthread_mutex_init"    expect unsafe function __c_pthread_mutex_init(:[pthread_mutex_t], :[pthread_mutexattr_t]?): int32
cdecl "pthread_mutex_lock"    expect unsafe function __c_pthread_mutex_lock(:[pthread_mutex_t]): int32
cdecl "pthread_mutex_unlock"  expect unsafe function __c_pthread_mutex_unlock(:[pthread_mutex_t]): int32
cdecl "pthread_mutex_destroy" expect unsafe function __c_pthread_mutex_destroy(:[pthread_mutex_t]): int32
cdecl "pthread_create"        expect unsafe function __c_pthread_create(:[pthread_t?], :any?, :any, :any?): none
cdecl "pthread_join"          expect unsafe function __c_pthread_join(:pthread_t, :any?): none
cdecl "pthread_self"          expect unsafe function __c_pthread_self(): pthread_t

final sealed struct Thread
    private static decl threads: Array
    private static decl nextID: int

    static decl mainThread: readonly Thread

    private decl func: lambda(): none
    private decl tid: pthread_t?

    decl name: str

    construct function __privateInit(): none
        0 => Thread::nextID
        1 TypedArray::new => Thread::threads
        Thread::currentThread => Thread::mainThread
        "Main Thread" => Thread::mainThread.name
    end

    expect static function stackTrace() arr: Array

    private static expect unsafe cdecl "_scl_get_main_addr" function mainAddress(): lambda

    static function currentThread(): Thread
        decl threadID: pthread_t
        unsafe
            __c_pthread_self => threadID
        end
        foreach thread in Thread::threads do
            if thread as Thread.tid as int threadID as int == then
                thread as Thread return
            fi
        done
        Thread::default => decl tmp: mut Thread
        threadID => tmp.tid
        unsafe
            mainAddress => tmp.func
        end
        tmp Thread::threads:push
        tmp return
    end

    function init(func: lambda(): none): none
        func => self.func
        nil => self.tid
        "Thread " Thread::nextID:toString + => self.name
        Thread::nextID 1 + => Thread::nextID
    end

    cdecl "_scl_stack_free" private static expect function stack_free(): none
    cdecl "_scl_stack_new" private static expect function stack_new(): none

    private function run(): none
        Thread::stack_new
        self Thread::threads:push
        self.func:accept
        self Thread::threads:remove
        Thread::stack_free
    end

    function start(): none
        if tid then
            "Thread started" ThreadException::new throw
        fi
        unsafe
            (ref self.tid) nil (ref self::run as any) (self as any) __c_pthread_create
        end
    end

    function join(): none
        unless tid then
            "Thread ended" ThreadException::new throw
        fi
        unsafe
            self.tid nil __c_pthread_join
        end
        nil => self.tid
    end

    function equals(other: Thread): bool
        self other == return
    end

    function ==(other: Thread): bool
        self.tid other.tid == return
    end
end