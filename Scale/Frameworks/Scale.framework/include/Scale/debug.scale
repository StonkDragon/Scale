import std.io
import std.threading.Thread

cdecl "print_stacktrace"
expect function trace(): none
cdecl "_scl_throw"
expect function throw(ex: Exception): none

cdecl "_scl_security_safe_exit"
expect function __c_exit(i: int): none
cdecl "_scl_default_signal_handler"
expect function __c_scl_default_signal_handler(_sig_: int): none
cdecl "raise"
expect function __c_raise(_sig_: int): int
cdecl "_scl_errno"
expect function errno(): int
cdecl "_scl_errno_str"
expect function strerror(): str
cdecl "_scl_set_signal_handler"
expect function setSignalHandler(fun: lambda(int): none, sig: int): none
cdecl "_scl_reset_signal_handler"
expect function resetSignalHandler(sig: int): none

function dumpStack(): none
  c!
    printf("Dump:\n");
    for (ssize_t i = _stack.ptr - 1; i >= 0; i--) {
      scl_int v = _stack.data[i].i;
      printf("   %zd: 0x" SCL_INT_HEX_FMT ", " SCL_INT_FMT "\n", i, v, v);
    }
	  printf("\n");
  end
end

function crash(): none
  1 __c_exit
end

function raise(_sig_: int): none
  if _sig_ 2 != _sig_ 4 != && _sig_ 5 != _sig_ 6 != && && _sig_ 10 != _sig_ 11 != && && then
    _sig_ __c_raise => decl raised
    if raised ! then
      _sig_ __c_scl_default_signal_handler
    fi
  else
    _sig_ __c_scl_default_signal_handler
  fi
end

cdecl "getchar"
expect function __c_getchar(): int8

function breakPoint(): none
  "Hit breakPoint. Press enter to continue." puts
  __c_getchar
end

sealed struct Exception
  decl msg: str
  decl stackTrace: const Array
  decl errnoStr: readonly str

  function init(): none
    if errno then
      strerror
    else
      ""
    fi => self.errnoStr
    Thread::stackTrace => self.stackTrace
    self.stackTrace:pop
    "" => self.msg
  end

  export sealed function printStackTrace(): none
    "Stacktrace of " typeof self + ":" + eputs
    for i in self.stackTrace.count 1 - to -1 step -- do
      "    " i self.stackTrace:get as str + eputs
    done
  end
end

final sealed struct InvalidSignalException: Exception
  decl sig: readonly int

  function init(sig: int): none
    sig => self.sig
  end
end

sealed struct Error: Exception
  function init(msg: str): none
    msg => self.msg
  end
end

final sealed struct AssertError: Error end

function sysPrettyString(): str
  40 malloc => decl sPtr: [int8]
  c!
    snprintf((*sPtr), 40, "%s %s", SCL_OS_NAME, SCL_SYSTEM);
  end
  sPtr str::new return
end
