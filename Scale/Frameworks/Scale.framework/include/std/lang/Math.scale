static final sealed struct MathConstants
  decl e: const float
  decl pi: const float
  decl nan: const float
  decl infinity: const float
  decl negativeInfinity: const float
end

cdecl "rand"
private expect foreign unsafe function __c_rand(): int32
cdecl "srand"
private expect foreign unsafe function __c_srand(:int): none
cdecl "time"
private expect foreign unsafe function __c_time(:[int]?): int

construct function mathInitialization(): none
  2.71828182845904523536028747135266250 => MathConstants::e
  3.14159265358979323846264338327950288 => MathConstants::pi

  0.0 0.0 / => MathConstants::nan
  1.0 0.0 / => MathConstants::infinity
  -1.0 0.0 / => MathConstants::negativeInfinity

  unsafe
    time:bits __c_srand
  end
end

expect foreign function acos(:float): float
expect foreign function asin(:float): float
expect foreign function atan(:float): float
expect foreign function atan2(:float, :float): float
expect foreign function cos(:float): float
expect foreign function sin(:float): float
expect foreign function tan(:float): float
expect foreign function acosh(:float): float
expect foreign function asinh(:float): float
expect foreign function atanh(:float): float
expect foreign function cosh(:float): float
expect foreign function sinh(:float): float
expect foreign function tanh(:float): float
expect foreign function exp(:float): float
expect foreign function exp2(:float): float
expect foreign function expm1(:float): float
expect foreign function log(:float): float
expect foreign function log10(:float): float
expect foreign function log2(:float): float
expect foreign function log1p(:float): float
expect foreign function logb(:float): float
expect foreign function fabs(:float): float
expect foreign function cbrt(:float): float
expect foreign function hypot(:float, :float): float
expect foreign function pow(:float, :float): float
expect foreign function sqrt(:float): float
expect foreign function erf(:float): float
expect foreign function erfc(:float): float
expect foreign function lgamma(:float): float
expect foreign function tgamma(:float): float
expect foreign function ceil(:float): float
expect foreign function floor(:float): float
expect foreign function nearbyint(:float): float
expect foreign function rint(:float): float
expect foreign function round(:float): float
expect foreign function trunc(:float): float
expect foreign function fmod(:float, :float): float
expect foreign function remainder(:float, :float): float
expect foreign function fdim(:float, :float): float
expect foreign function fmax(:float, :float): float
expect foreign function fmin(:float, :float): float
expect foreign function fma(:float, :float, :float): float

function random(): int
  unsafe
    __c_rand 32 << __c_rand | return
  end
end

function iseven(number: int): int
  number 2 % 0 == return
end

function isodd(number: int): int
  number iseven ! return
end

function lrandom(limit: int): int
  random limit % return
end

function lerp(a: float, b: float, t: float): float
  b a - t * a + return
end

function abs(a: int): int
  if a 0 < then
    a -1 * return
  fi
  a return
end

function sign(a: int): int
  if a 0 < then
    1 return
  fi
  if a 0 > then
    -1 return
  fi
  0 return
end

function min(a: int, b: int): int
  if a b < then
    a return
  fi
  b return
end

function max(a: int, b: int): int
  if a b > then
    a return
  fi
  b return
end

function min(a: float, b: float): float
  if a b < then
    a return
  fi
  b return
end

function max(a: float, b: float): float
  if a b > then
    a return
  fi
  b return
end

function clamp(x: int, lower: int, upper: int): int
  (lower (x upper min) max) return
end

function gcd(a: int, b: int): int
  if a 0 == then
    b return
  fi
  if b 0 == then
    a return
  fi
  if a b < then
    b a gcd return
  fi
  b a b % gcd return
end

function lcm(a: int, b: int): int
  (a b * abs) (a b gcd) / return
end
