typealias __c_file "FILE*"

final struct File
  private decl _name: str
  private decl _file: __c_file

  function init(name: str): none
    unsafe
      name:view "ab+":view File::__c_fopen => self._file
    end
    name => self._name
  end

  function name(): str
    self._name return
  end

  function close(): none
    unsafe
      _file File::__c_fclose
    end
  end

  function append(s: str): none
    unsafe
      s:view 1 s:size _file File::__c_fwrite
    end
  end

  function puts(s: any): none
    s builtinToString => decl val: str
    val self:append
    "\n" self:append
  end

  function writeBinary(buf: any, sz: int): none
    unsafe
      buf 1 sz _file File::__c_fwrite
    end
  end

  function read(sz: int): any
    new[sz] => decl buffer: [any]?
    unsafe
      buffer 1 sz _file File::__c_fread
    end
    buffer
    return
  end

  function offsetFromBegin(offset: int): none
    unsafe
      _file offset 0 File::__c_fseek
    end
  end

  function offsetFromEnd(offset: int): none
    unsafe
      _file offset 2 File::__c_fseek
    end
  end

  function offset(offset: int): none
    unsafe
      _file offset 1 File::__c_fseek
    end
  end

  function fileno(): int
    unsafe
      _file File::__c_fileno
      return
    end
  end

  function pos(): int
    unsafe
      _file File::__c_ftell
      return
    end
  end

  function delete(): bool
    unsafe
      self._name:view __c_remove 0 ==
      return
    end
  end

  function create(): none
    "" self:append
  end

  static function exists(f: str): bool
    unsafe
      f:view "r":view File::__c_fopen nil != return
    end
  end

  static expect foreign unsafe cdecl "fopen"  function __c_fopen(fileName: [int8], mode: [int8]): __c_file?
  static expect foreign unsafe cdecl "fwrite" function __c_fwrite(buffer: any, elemSize: int, numElems: int, filePtr: __c_file): none
  static expect foreign unsafe cdecl "fread"  function __c_fread(buffer: any, numElems: int, elemSize: int, filePtr: __c_file): none
  static expect foreign unsafe cdecl "fclose" function __c_fclose(filePtr: __c_file): none
  static expect foreign unsafe cdecl "ftell"  function __c_ftell(filePtr: __c_file): int
  static expect foreign unsafe cdecl "fileno" function __c_fileno(filePtr: __c_file): int
  static expect foreign unsafe cdecl "remove" function __c_remove(fileName: [int8]): int
  static expect foreign unsafe cdecl "fseek"  function __c_fseek(filePtr: __c_file, offset: int, _whence_: int): none
end
