typealias __c_file "FILE*"

cdecl "scale_get_stdin"
private expect foreign unsafe function __c_stdin(): __c_file
cdecl "scale_get_stdout"
private expect foreign unsafe function __c_stdout(): __c_file
cdecl "scale_get_stderr"
private expect foreign unsafe function __c_stderr(): __c_file
cdecl "strlen"
private expect foreign unsafe function __c_strlen(cstr: [int8]): int
cdecl "getline"
private expect foreign unsafe function __c_getline(cstr: [[int8]], size: [int], file: __c_file): int

final struct EndOfFileException: Exception
  init()
    "End of file reached" => self.msg
  end
end

final struct File
  private decl _name: str
  private decl _file: __c_file
  private decl _can_close: bool

  static (
    unsafe
      File static {
        "stdin" => _name
        __c_stdin => _file
        false => _can_close
      }
    end
  ) => decl stdin: const File
  
  static (
    unsafe
      File static {
        "stdout" => _name
        __c_stdout => _file
        false => _can_close
      }
    end
  ) => decl stdout: const File
  
  static (
    unsafe
      File static {
        "stderr" => _name
        __c_stderr => _file
        false => _can_close
      }
    end
  ) => decl stderr: const File

  init(name: str)
    unsafe
      name:view "rb+":view File::__c_fopen => decl file: __c_file?
      if file as any nil == then
        "Could not open file " name + ": " + strerror + NullPointerException::new throw
      fi
      file!! => self._file
    end
    name => self._name
    true => self._can_close
  end

  function name(): str
    self._name return
  end

  function close(): none
    if self._can_close ! then
      "Cannot close file " self._name + ": File is not closable" + IllegalStateException::new throw
    fi
    unsafe
      _file File::__c_fclose
    end
  end

  function append(s: str): none
    s:view self:append
  end

  function append(s: [int8]): none
    unsafe
      s 1 s:size _file File::__c_fwrite
    end
  end

  nonvirtual reified function puts<T>(value: T): none
    value:toString self:append
    "\n" self:append
  end

  function writeBinary(buf: any, sz: int): none
    unsafe
      buf 1 sz _file File::__c_fwrite
    end
  end

  function read(sz: int): any
    new[sz] => decl buffer: [any]?
    unsafe
      buffer 1 sz _file File::__c_fread
    end
    buffer
    return
  end

  function offsetFromBegin(offset: int): none
    unsafe
      _file offset 0 File::__c_fseek
    end
  end

  function offsetFromEnd(offset: int): none
    unsafe
      _file offset 2 File::__c_fseek
    end
  end

  function toStart(): none
    0 self:offsetFromBegin
  end

  function toEnd(): none
    0 self:offsetFromEnd
  end

  function offset(offset: int): none
    unsafe
      _file offset 1 File::__c_fseek
    end
  end

  function fileno(): int
    unsafe
      _file File::__c_fileno
      return
    end
  end

  function pos(): int
    unsafe
      _file File::__c_ftell
      return
    end
  end

  function delete(): bool
    unsafe
      self._name:view __c_remove 0 ==
      return
    end
  end

  function create(): none
    "" self:append
  end

  function readLine(): str
    decl len: int
    decl line: [int8]?

    unsafe
      if ref line as [[int8]] ref len self._file __c_getline 0 < then
        EndOfFileException::new throw
      fi
    end

    line!! str::new => decl s: str
    (0 to s:size 1 -) s:subString
    s return
  end

  function readLines(): [str]
    new<str>[0] => decl lines: [str]
    decl line: str?
    while self:readLine => line line nil != do
      line!! lines:append as [str] => lines
    done
    lines return
  end

  function size(): int
    self:pos => decl currentPos: int
    0 self:offsetFromEnd
    self:pos => decl fileSize: int
    currentPos self:offsetFromBegin
    fileSize return
  end

  function contents(): [int8]
    self:size self:read as [int8] return
  end

  function stringContent(): str
    self:contents str::of return
  end

  function setContent(data: [int8]): none
    0 self:offsetFromBegin
    data data:size self:writeBinary
  end

  function setContent(data: str): none
    data:view self:setContent
  end

  static function exists(f: str): bool
    unsafe
      f:view "r":view File::__c_fopen => decl file: __c_file?
      if file nil != then
        file!! File::__c_fclose
        true return
      fi
      false return
    end
  end

  static expect foreign unsafe cdecl "fopen"  function __c_fopen(fileName: [int8], mode: [int8]): __c_file?
  static expect foreign unsafe cdecl "fwrite" function __c_fwrite(buffer: any, elemSize: int, numElems: int, filePtr: __c_file): none
  static expect foreign unsafe cdecl "fread"  function __c_fread(buffer: any, numElems: int, elemSize: int, filePtr: __c_file): none
  static expect foreign unsafe cdecl "fclose" function __c_fclose(filePtr: __c_file): none
  static expect foreign unsafe cdecl "ftell"  function __c_ftell(filePtr: __c_file): int
  static expect foreign unsafe cdecl "fileno" function __c_fileno(filePtr: __c_file): int
  static expect foreign unsafe cdecl "remove" function __c_remove(fileName: [int8]): int
  static expect foreign unsafe cdecl "fseek"  function __c_fseek(filePtr: __c_file, offset: int, _whence_: int): none
  static expect foreign unsafe cdecl "fgets"  function __c_fgets(:[int8], :int, :__c_file): [int8]
end
