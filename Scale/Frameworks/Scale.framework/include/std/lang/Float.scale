cdecl "sprintf"
private expect foreign unsafe function __c_sprintf(:[int8], :[int8], :varargs): int
cdecl "atof"
private expect foreign unsafe function __c_atof(:[int8]): float

final static struct float
    (1023) => decl maxExponent: const int
    (-1022) => decl minExponent: const int

    function toString(x: float): str
        if x:isNaN then
            "nan" return
        elif x:isInfinite then
            if x 0 < then
                "-inf" return
            else
                "inf" return
            fi
        fi
        new<int8>[100] => decl out: [int8]
        unsafe
            out c"%f" varargs x __c_sprintf drop
        end
        out str::new return
    end

    function toPrecisionString(x: float): str
        if x:isNaN then
            "nan" return
        elif x:isInfinite then
            if x 0 < then
                "-inf" return
            else
                "inf" return
            fi
        fi
        new<int8>[100] => decl out: [int8]
        unsafe
            out c"%.17f" varargs x __c_sprintf drop
        end
        out str::new return
    end

    function toHexString(x: float): str
        new<int8>[19] => decl out: [int8]
        unsafe
            out "0x%016lx" varargs x:bits __c_sprintf drop
        end
        out str::new return
    end

    function parse(s: str): float
        unsafe
            s:view __c_atof return
        end
    end

    function bits(x: float): int
        ref x as [int] @ return
    end

    expect foreign function isInfinite(x: float): bool

    expect foreign function isNaN(x: float): bool

    function isFinite(x: float): bool
        x float::isInfinite ! x float::isNaN ! && return
    end

    function isNotNaN(x: float): bool
        x float::isNaN ! return
    end

    function asReference(f: float): Float
        f Float::new return
    end

    function fromBits(bits: any): float
        ref bits as [float] @ return
    end

    function =>(x: int): float
        x as float return
    end
end

final static struct float32
    (127) => decl maxExponent: const int
    (-126) => decl minExponent: const int

    function toString(x: float32): str
        if x:isNaN then
            "nan" return
        elif x:isInfinite then
            if x 0 < then
                "-inf" return
            else
                "inf" return
            fi
        fi
        new<int8>[100] => decl out: [int8]
        unsafe
            out c"%f" varargs x __c_sprintf drop
        end
        out str::new return
    end

    function toPrecisionString(x: float32): str
        if x:isNaN then
            "nan" return
        elif x:isInfinite then
            if x 0 < then
                "-inf" return
            else
                "inf" return
            fi
        fi
        new<int8>[100] => decl out: [int8]
        unsafe
            out c"%.17f" varargs x __c_sprintf drop
        end
        out str::new return
    end

    function toHexString(x: float32): str
        new<int8>[19] => decl out: [int8]
        unsafe
            out "0x%016lx" varargs x:bits __c_sprintf drop
        end
        out str::new return
    end

    function parse(s: str): float32
        unsafe
            s:view __c_atof as float32 return
        end
    end

    function bits(x: float32): int
        ref x as [int32] @ return
    end

    expect foreign function isInfinite(x: float32): bool

    expect foreign function isNaN(x: float32): bool

    function isFinite(x: float32): bool
        x float32::isInfinite ! x float32::isNaN ! && return
    end

    function isNotNaN(x: float32): bool
        x float32::isNaN ! return
    end

    function asReference(f: float32): Float
        f as float Float::new return
    end

    function fromBits(bits: any): float32
        ref bits as [float32] @ return
    end

    function =>(x: int): float
        x as float return
    end
end

final struct Float
    decl value: readonly float

    static function valueOf(x: float): Float
        x Float::new return
    end

    init(x: float)
        x => self.value
    end
    function equals(other: any): bool
        other self == return
    end
    function ==(other: any): bool
        if other is Float then
            other as Float.value self.value == return
        else
            ref other as [float] @ self.value == return
        fi
    end
    function !=(other: any): none
        if other is Float then
            other as Float.value self.value != return
        else
            ref other as [float] @ self.value != return
        fi
    end
    function @(): float
        self.value return
    end

    const function toString(): str
        self.value:toString return
    end
end
