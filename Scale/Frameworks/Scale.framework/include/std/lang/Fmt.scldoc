@std.io.fmt
@@{frameworkPath}/include/std/lang/Fmt.scale
### final static struct ConsoleColor
The static struct `ConsoleColor` provides utility functions for working with the console color.

### static function ConsoleColor::reset(): str
Returns the ANSI escape sequence to reset the console color.

### static function ConsoleColor::black(): str
Returns the ANSI escape sequence to set the console color to black.

### static function ConsoleColor::red(): str
Returns the ANSI escape sequence to set the console color to red.

### static function ConsoleColor::green(): str
Returns the ANSI escape sequence to set the console color to green.

### static function ConsoleColor::yellow(): str
Returns the ANSI escape sequence to set the console color to yellow.

### static function ConsoleColor::blue(): str
Returns the ANSI escape sequence to set the console color to blue.

### static function ConsoleColor::magenta(): str
Returns the ANSI escape sequence to set the console color to magenta.

### static function ConsoleColor::cyan(): str
Returns the ANSI escape sequence to set the console color to cyan.

### static function ConsoleColor::white(): str
Returns the ANSI escape sequence to set the console color to white.

### static function ConsoleColor::bold(): str
Returns the ANSI escape sequence to set the console color to bold.

### final static struct FmtIO
The static struct `FmtIO` provides utility functions for working with formatted output.

### static function FmtIO::puts(fmt: str, args: varargs): none
Writes the formatted string `fmt` to stdout.
The format string `fmt` is a string that may contain format specifiers.
Format specifiers are replaced by the values of the arguments `args`.
The format specifiers are introduced by a `%` character.
The following format specifiers are supported:
- `"%s"`: string
- `"%i"`: integer
- `"%f"`: float
- `"%c"`: character
- `"%@"`: object
- `"%p"`: pointer
- `"%b"`: boolean
