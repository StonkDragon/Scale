typealias int64 "scl_int64"
typealias int32 "scl_int32"
typealias int16 "scl_int16"
typealias int8 "scl_int8"
typealias uint64 "scl_uint64"
typealias uint32 "scl_uint32"
typealias uint16 "scl_uint16"
typealias uint8 "scl_uint8"
typealias lambda "_scl_lambda"

construct function inttypes_scale_init(): none
  0x80 => int8::minValue
  0x7f => int8::maxValue
  0x8000000000000000 => int::minValue
  0x7fffffffffffffff => int::maxValue
end

final static sealed struct int8
  decl minValue: const int8
  decl maxValue: const int8

  intrinsic function toString(x: int8): str
    2 malloc => decl out: [int8]
    unsafe
      c!
        sprintf(*out, "%c", *x);
      end
    end
    out str::new return
  end
end

final static sealed struct int
  decl minValue: const int
  decl maxValue: const int

  intrinsic function toString(x: int): str
    25 malloc => decl out: [int8]
    unsafe
      c!
        sprintf(*out, SCL_INT_FMT, *x);
      end
    end
    out str::new return
  end

  intrinsic function toHexString(x: int): str
    19 malloc => decl out: [int8]
    unsafe
      c!
        sprintf(*out, SCL_PTR_HEX_FMT, *x);
      end
    end
    out str::new return
  end

  function parse(s: str): int
    unsafe
      s:view __c_atoll as int return
    end
  end

  intrinsic function toInt8(value: any): int8
    value as int8 return
  end

  intrinsic function toInt16(value: any): int16
    value as int16 return
  end

  intrinsic function toInt32(value: any): int32
    value as int32 return
  end

  intrinsic function toInt(value: any): int
    value as int return
  end

  intrinsic function toUInt8(value: any): uint8
    value as uint8 return
  end

  intrinsic function toUInt16(value: any): uint16
    value as uint16 return
  end

  intrinsic function toUInt32(value: any): uint32
    value as uint32 return
  end

  intrinsic function toUInt(value: any): uint
    value as uint return
  end

  intrinsic function isValidInt8(val: any): bool
    val val:toInt8 == return
  end

  intrinsic function isValidInt16(val: any): bool
    val val:toInt16 == return
  end

  intrinsic function isValidInt32(val: any): bool
    val val:toInt32 == return
  end

  intrinsic function isValidUInt8(val: any): bool
    val val:toUInt8 == return
  end

  intrinsic function isValidUInt16(val: any): bool
    val val:toUInt16 == return
  end

  intrinsic function isValidUInt32(val: any): bool
    val val:toUInt32 == return
  end
end

expect cdecl "op$add_ii" function +(:int, :int): int
expect cdecl "op$add_if" function +(:int, :float): float
expect cdecl "op$add_fi" function +(:float, :int): float
expect cdecl "op$add_ff" function +(:float, :float): float
expect cdecl "op$sub_ii" function -(:int, :int): int
expect cdecl "op$sub_if" function -(:int, :float): float
expect cdecl "op$sub_fi" function -(:float, :int): float
expect cdecl "op$sub_ff" function -(:float, :float): float
expect cdecl "op$mul_ii" function *(:int, :int): int
expect cdecl "op$mul_if" function *(:int, :float): float
expect cdecl "op$mul_fi" function *(:float, :int): float
expect cdecl "op$mul_ff" function *(:float, :float): float
expect cdecl "op$div_ii" function /(:int, :int): int
expect cdecl "op$div_if" function /(:int, :float): float
expect cdecl "op$div_fi" function /(:float, :int): float
expect cdecl "op$div_ff" function /(:float, :float): float
expect cdecl "op$pow_ii" function **(:int, :int): int
expect cdecl "op$pow_if" function **(:int, :float): float
expect cdecl "op$pow_fi" function **(:float, :int): float
expect cdecl "op$pow_ff" function **(:float, :float): float
expect cdecl "op$mod" function %(:int, :int): int
expect cdecl "op$land" function &(:int, :int): int
expect cdecl "op$lor" function |(:int, :int): int
expect cdecl "op$lxor" function ^(:int, :int): int
expect cdecl "op$lnot" function ~(:int): int
expect cdecl "op$lsl" function <<(:int, :int): int
expect cdecl "op$lsr" function >>(:int, :int): int

deprecated![since: "23.5", replacement: "int::toInt8"]
function toInt8(value: any): int8
  value:toInt8 return
end

deprecated![since: "23.5", replacement: "int::toInt16"]
function toInt16(value: any): int16
  value:toInt16 return
end

deprecated![since: "23.5", replacement: "int::toInt32"]
function toInt32(value: any): int32
  value:toInt32 return
end

deprecated![since: "23.5", replacement: "int::toInt"]
function toInt(value: any): int
  value:toInt return
end

deprecated![since: "23.5", replacement: "int::toUInt8"]
function toUInt8(value: any): uint8
  value:toUInt8 return
end

deprecated![since: "23.5", replacement: "int::toUInt16"]
function toUInt16(value: any): uint16
  value:toUInt16 return
end

deprecated![since: "23.5", replacement: "int::toUInt32"]
function toUInt32(value: any): uint32
  value:toUInt32 return
end

deprecated![since: "23.5", replacement: "int::toUInt"]
function toUInt(value: any): uint
  value:toUInt return
end

deprecated![since: "23.5", replacement: "int::isValidInt8"]
function isValidInt8(val: any): bool
  val:isValidInt8 return
end

deprecated![since: "23.5", replacement: "int::isValidInt16"]
function isValidInt16(val: any): bool
  val:isValidInt16 return
end

deprecated![since: "23.5", replacement: "int::isValidInt32"]
function isValidInt32(val: any): bool
  val:isValidInt32 return
end

deprecated![since: "23.5", replacement: "int::isValidUInt8"]
function isValidUInt8(val: any): bool
  val:isValidUInt8 return
end

deprecated![since: "23.5", replacement: "int::isValidUInt16"]
function isValidUInt16(val: any): bool
  val:isValidUInt16 return
end

deprecated![since: "23.5", replacement: "int::isValidUInt32"]
function isValidUInt32(val: any): bool
  val:isValidUInt32 return
end

function isnil(x: any): bool
  x nil == return
end

function isnotnil(x: any): bool
  x nil != return
end
