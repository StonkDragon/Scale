typealias int64? "scl_int64"
typealias int32? "scl_int32"
typealias int16? "scl_int16"
typealias int8? "scl_int8"
typealias uint64? "scl_uint64"
typealias uint32? "scl_uint32"
typealias uint16? "scl_uint16"
typealias uint8? "scl_uint8"
typealias float32? "scl_float32"
typealias lambda "_scl_lambda"

cdecl "atoll"
private expect foreign unsafe function __c_atoll(:[int8]): int64
cdecl "sprintf"
private expect foreign unsafe function __c_sprintf(:[int8], :[int8], :varargs): int

macro! IntStruct(type) {
  final static sealed struct $type
    decl minValue: const $type
    decl maxValue: const $type

    construct function init(): none
      1 sizeof $type 8 * 1 - << => $type::minValue
      if sizeof $type 8 == then
        0x7fffffffffffffff => $type::maxValue
      else
        1 sizeof $type 8 * 1 - << 1 - => $type::maxValue
      fi
    end

    function toString(x: $type): str
      new<int8>[2] => decl out: [int8]
      unsafe
        if sizeof $type 1 == then
          out c"%c" x __c_sprintf! 1 drop
        else
          out c"%ld" x __c_sprintf! 1 drop
        fi
      end
      out str::new return
    end

    function toHexString(x: $type): str
      new<int8>[5] => decl out: [int8]
      unsafe
        out "0x%0" sizeof $type 2 * + "lx" +:view x __c_sprintf! 1 drop
      end
      out str::new return
    end

    function parse(s: str): $type
      unsafe
        s:view __c_atoll as $type return
      end
    end

    function asReference(i: int): Int
      i Int::new return
    end
  end
}
macro! UIntStruct(type) {
  final static sealed struct $type
    decl minValue: const $type
    decl maxValue: const $type

    construct function $type(): none
      0 => $type::minValue
      -1 => $type::maxValue
    end

    function toString(x: $type): str
      new<int8>[2] => decl out: [int8]
      unsafe
        if sizeof $type 1 == then
          out c"%c" x __c_sprintf! 1 drop
        else
          out c"%lu" x __c_sprintf! 1 drop
        fi
      end
      out str::new return
    end

    function toHexString(x: $type): str
      new<int8>[5] => decl out: [int8]
      unsafe
        out "0x%0" sizeof $type 2 * + "lx" +:view x __c_sprintf! 1 drop
      end
      out str::new return
    end

    function parse(s: str): $type
      unsafe
        s:view __c_atoll as $type return
      end
    end

    function asReference(i: int): Int
      i Int::new return
    end
  end
}

IntStruct! int8
IntStruct! int16
IntStruct! int32
IntStruct! int64
IntStruct! int
UIntStruct! uint8
UIntStruct! uint16
UIntStruct! uint32
UIntStruct! uint64
UIntStruct! uint

delmacro! IntStruct
delmacro! UIntStruct

struct Int
  decl value: readonly int

  static function valueOf(x: int): Int
    x Int::new return
  end

  function init(x: int): none
    x => self.value
  end

  function equals(other: any): bool
    if other is Int then
      other as Int.value self.value == return
    else
      other as int self.value == return
    fi
  end

  function ==(other: any): bool
    other self:equals return
  end

  function !=(other: any): bool
    other self:equals ! return
  end

  function @(): int
    self.value return
  end

  function toString(): str
    self.value:toString return
  end
end

expect foreign operator "add" function +(:int, :int): int
expect foreign operator "sub" function -(:int, :int): int
expect foreign operator "mul" function *(:int, :int): int
expect foreign operator "div" function /(:int, :int): int
expect foreign operator "pow" function **(:int, :int): int

expect foreign operator "add" function +(:int, :float): float
expect foreign operator "sub" function -(:int, :float): float
expect foreign operator "mul" function *(:int, :float): float
expect foreign operator "div" function /(:int, :float): float
expect foreign operator "pow" function **(:int, :float): float

expect foreign operator "add" function +(:float, :int): float
expect foreign operator "sub" function -(:float, :int): float
expect foreign operator "mul" function *(:float, :int): float
expect foreign operator "div" function /(:float, :int): float
expect foreign operator "pow" function **(:float, :int): float

expect foreign operator "add" function +(:float, :float): float
expect foreign operator "sub" function -(:float, :float): float
expect foreign operator "mul" function *(:float, :float): float
expect foreign operator "div" function /(:float, :float): float
expect foreign operator "pow" function **(:float, :float): float

expect foreign operator "add" function +(:int, :float32): float32
expect foreign operator "sub" function -(:int, :float32): float32
expect foreign operator "mul" function *(:int, :float32): float32
expect foreign operator "div" function /(:int, :float32): float32
expect foreign operator "pow" function **(:int, :float32): float32

expect foreign operator "add" function +(:float32, :int): float32
expect foreign operator "sub" function -(:float32, :int): float32
expect foreign operator "mul" function *(:float32, :int): float32
expect foreign operator "div" function /(:float32, :int): float32
expect foreign operator "pow" function **(:float32, :int): float32

expect foreign operator "add" function +(:float32, :float32): float32
expect foreign operator "sub" function -(:float32, :float32): float32
expect foreign operator "mul" function *(:float32, :float32): float32
expect foreign operator "div" function /(:float32, :float32): float32
expect foreign operator "pow" function **(:float32, :float32): float32

expect foreign operator "add" function +(:float32, :float): float
expect foreign operator "sub" function -(:float32, :float): float
expect foreign operator "mul" function *(:float32, :float): float
expect foreign operator "div" function /(:float32, :float): float
expect foreign operator "pow" function **(:float32, :float): float

expect foreign operator "add" function +(:float, :float32): float
expect foreign operator "sub" function -(:float, :float32): float
expect foreign operator "mul" function *(:float, :float32): float
expect foreign operator "div" function /(:float, :float32): float
expect foreign operator "pow" function **(:float, :float32): float

expect foreign operator "eq" function ==(:int, :float): bool
expect foreign operator "ne" function !=(:int, :float): bool
expect foreign operator "gt" function >(:int, :float): bool
expect foreign operator "ge" function >=(:int, :float): bool
expect foreign operator "lt" function <(:int, :float): bool
expect foreign operator "le" function <=(:int, :float): bool

expect foreign operator "eq" function ==(:float, :int): bool
expect foreign operator "ne" function !=(:float, :int): bool
expect foreign operator "gt" function >(:float, :int): bool
expect foreign operator "ge" function >=(:float, :int): bool
expect foreign operator "lt" function <(:float, :int): bool
expect foreign operator "le" function <=(:float, :int): bool

expect foreign operator "eq" function ==(:float, :float): bool
expect foreign operator "ne" function !=(:float, :float): bool
expect foreign operator "gt" function >(:float, :float): bool
expect foreign operator "ge" function >=(:float, :float): bool
expect foreign operator "lt" function <(:float, :float): bool
expect foreign operator "le" function <=(:float, :float): bool

expect foreign operator "eq" function ==(:int, :int): bool
expect foreign operator "ne" function !=(:int, :int): bool
expect foreign operator "gt" function >(:int, :int): bool
expect foreign operator "ge" function >=(:int, :int): bool
expect foreign operator "lt" function <(:int, :int): bool
expect foreign operator "le" function <=(:int, :int): bool

expect foreign operator "eq" function ==(:float, :float32): bool
expect foreign operator "ne" function !=(:float, :float32): bool
expect foreign operator "gt" function >(:float, :float32): bool
expect foreign operator "ge" function >=(:float, :float32): bool
expect foreign operator "lt" function <(:float, :float32): bool
expect foreign operator "le" function <=(:float, :float32): bool

expect foreign operator "eq" function ==(:float32, :float): bool
expect foreign operator "ne" function !=(:float32, :float): bool
expect foreign operator "gt" function >(:float32, :float): bool
expect foreign operator "ge" function >=(:float32, :float): bool
expect foreign operator "lt" function <(:float32, :float): bool
expect foreign operator "le" function <=(:float32, :float): bool

expect foreign operator "eq" function ==(:float32, :float32): bool
expect foreign operator "ne" function !=(:float32, :float32): bool
expect foreign operator "gt" function >(:float32, :float32): bool
expect foreign operator "ge" function >=(:float32, :float32): bool
expect foreign operator "lt" function <(:float32, :float32): bool
expect foreign operator "le" function <=(:float32, :float32): bool

expect foreign operator "eq" function ==(:int, :float32): bool
expect foreign operator "ne" function !=(:int, :float32): bool
expect foreign operator "gt" function >(:int, :float32): bool
expect foreign operator "ge" function >=(:int, :float32): bool
expect foreign operator "lt" function <(:int, :float32): bool
expect foreign operator "le" function <=(:int, :float32): bool

expect foreign operator "eq" function ==(:float32, :int): bool
expect foreign operator "ne" function !=(:float32, :int): bool
expect foreign operator "gt" function >(:float32, :int): bool
expect foreign operator "ge" function >=(:float32, :int): bool
expect foreign operator "lt" function <(:float32, :int): bool
expect foreign operator "le" function <=(:float32, :int): bool

expect foreign operator "eq" function ==(:any, :any): bool
expect foreign operator "ne" function !=(:any, :any): bool
expect foreign operator "gt" function >(:any, :any): bool
expect foreign operator "ge" function >=(:any, :any): bool
expect foreign operator "lt" function <(:any, :any): bool
expect foreign operator "le" function <=(:any, :any): bool

expect foreign operator "and" function &&(:int, :int): bool
expect foreign operator "or" function ||(:int, :int): bool
expect foreign operator "not" function !(:int): bool

expect foreign operator "mod" function %(:int, :int): int
expect foreign operator "land" function &(:int, :int): int
expect foreign operator "lor" function |(:int, :int): int
expect foreign operator "lxor" function ^(:int, :int): int
expect foreign operator "lnot" function ~(:int): int
expect foreign operator "lsl" function <<(:int, :int): int
expect foreign operator "lsr" function >>(:int, :int): int
expect foreign operator "rol" function <<<(:int, :int): int
expect foreign operator "ror" function >>>(:int, :int): int

expect foreign operator "inc" function ++(:int): int
expect foreign operator "inc" function ++(:float): float
expect foreign operator "inc" function ++(:float32): float32
expect foreign operator "dec" function --(:int): int
expect foreign operator "dec" function --(:float): float
expect foreign operator "dec" function --(:float32): float32

expect foreign reified operator "at" function @<[T]>(:[T]): T
expect foreign reified operator "ann" function !!<T?>(:T?): T
expect foreign reified operator "elvis" function ?:<T?, >(:T?, :T): T

function isnil(x: any): bool
  x nil == return
end

function isnotnil(x: any): bool
  x nil != return
end
