import std.io
import std.util.Array

cdecl "s_memset"
expect foreign unsafe reified function memset<T,,>(ptr: T, val: int32, len: int): T
cdecl "s_memcpy"
expect foreign unsafe reified function memcpy<T,,>(dst: T, src: T, n: int): T
cdecl "_scl_sleep"
expect foreign function sleep(millis: int): none
cdecl "system"
private expect foreign unsafe function __c_system(:[int8]): int
cdecl "getenv"
private expect foreign unsafe function __c_getenv(:[int8]): [int8]?
cdecl "atoll"
private expect foreign unsafe function __c_atoll(:[int8]): int64
cdecl "atof"
private expect foreign unsafe function __c_atof(:[int8]): float
cdecl "sprintf"
private expect foreign unsafe function __c_sprintf(:[int8], :[int8], :varargs): int

typealias varargs "..."

function system(command: str): int
  unsafe
    command:view __c_system
    return
  end
end

function getenv(environKey: str): str?
  unsafe
    environKey:view __c_getenv? str::new return
  end
end

layout timeval
  decl seconds: int
  decl microseconds: int32
end

cdecl "gettimeofday"
private expect foreign unsafe function __c_gettimeofday(:timeval, :any): int

function time(): float
  timeval local {
    0 => seconds
    0 => microseconds
  } => decl tv: timeval
  
  unsafe
    tv nil __c_gettimeofday drop
  end

  tv.seconds => decl seconds: int
  tv.microseconds => decl microseconds: int

  microseconds as float 1000000.0 / seconds + return
end
