import std.io
import std.util.Array

cdecl "_scl_memset"
expect foreign unsafe function memset(ptr: [any], val: int32, len: int): [any]
cdecl "_scl_memcpy"
expect foreign unsafe function memcpy(dst: [any], src: [any], n: int): [any]
cdecl "_scl_stack_size"
expect foreign function sizeofStack(): int
cdecl "_scl_sleep"
expect foreign function sleep(millis: int): none
cdecl "_scl_alloc"
deprecated![since: "23.7", replacement: "any::new", forRemoval: true]
expect foreign function malloc(size: int): [any]
cdecl "_scl_free"
deprecated![since: "23.7", replacement: "any::delete", forRemoval: true]
expect foreign function free(pointer: [any]): none
cdecl "_scl_realloc"
deprecated![since: "23.7", replacement: "any::resize", forRemoval: true]
expect foreign function realloc(pointer: [any], size: int): [any]

cdecl "system"
private expect foreign unsafe function __c_system(:[int8]): int
cdecl "getenv"
private expect foreign unsafe function __c_getenv(:[int8]): [int8]?
cdecl "atoll"
private expect foreign unsafe function __c_atoll(:[int8]): int64
cdecl "atof"
private expect foreign unsafe function __c_atof(:[int8]): float
cdecl "sprintf"
private expect foreign unsafe function __c_sprintf(:[int8], :[int8], :varargs): int

typealias varargs "/* varargs */ ..."

cdecl "_scl_system" function system(command: str): int
  unsafe
    command:view __c_system
    return
  end
end

cdecl "_scl_getenv" function getenv(environKey: str): str?
  unsafe
    environKey:view __c_getenv? str::new return
  end
end

layout timeval
  decl seconds: int
  decl microseconds: int32
end

cdecl "gettimeofday"
private expect foreign unsafe function __c_gettimeofday(:timeval, :any): int

cdecl "_scl_time" function time(): float
  sizeof timeval any::new as timeval => decl tv: timeval
  
  unsafe
    tv nil __c_gettimeofday drop
  end

  tv.seconds => decl seconds: int
  tv.microseconds => decl microseconds: int

  tv any::delete
  microseconds as float 1000000.0 / seconds +
  return
end

deprecated![since: "23.5", replacement: "int::toString"]
function longToString(theNumber: int): str
  new<int8>[25] => decl out: [int8]
  unsafe
    out "%ld":view theNumber __c_sprintf! 1 drop
  end
  out str::new return
end

deprecated![since: "23.5", replacement: "int::parse"]
function stringToLong(theString: str): int
  unsafe
    theString:view __c_atoll as int return
  end
end

deprecated![since: "23.5", replacement: "float::toString"]
function stringToDouble(theString: str): float
  unsafe
    theString:view __c_atof return
  end
end

deprecated![since: "23.5", replacement: "float::parse"]
function doubleToString(theNumber: float): str
  new<int8>[100] => decl out: [int8]
  unsafe
    out "%f":view theNumber __c_sprintf! 1 drop
  end
  out str::new return
end

deprecated![since: "23.5"]
function nop(): none
  0 sleep
end
