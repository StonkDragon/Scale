cdecl "write"
expect unsafe function __c_write(fileDescriptor: int, cstr: [int8], _len_: int): int32
cdecl "read"
expect unsafe function __c_read(fileDescriptor: int, buffer: [int8], amount: int): int32
cdecl "fprintf"
expect unsafe function __c_fprintf(fp: any, fmt: [int8], :varargs): int32
cdecl "printf"
expect unsafe function __c_printf(fmt: [int8], :varargs): int32

intrinsic cdecl "_scl_write" unsafe function write(fileDescriptor: int, string: str): none
  fileDescriptor string:view string:size __c_write drop
end

intrinsic cdecl "_scl_read" function read(fileDescriptor: int, amount: int): str?
  amount malloc => decl buf: [int8]
  fileDescriptor buf amount __c_read drop
  buf str::new return
end

cdecl "_scl_puts_str"
expect function puts(:str): none
expect function puts(:[int8]): none
function puts(value: any): none value:toString puts end
function puts(f: float): none   f:toString puts end

function eputs(s: [int8]): none
  unsafe
    c!
      _scl_push()->v = stderr;
    end
  end
  "%s\n":view

  s:toString:view
  unsafe
    __c_fprintf! 1
  end
  drop
end
function eputs(s: str): none     s:toString:view eputs end
function eputs(f: float): none   f:toString:view eputs end
function eputs(value: any): none value:toString:view eputs end

function putint(number: int): none number puts end

function putfloat(number: float): none number:toString puts end

deprecated![since: "23.7", replacement: "Exception", forRemoval: true]
function throwerr(errorString: str): none
  Exception::new => decl e: mut Exception
  errorString => e.msg
  e throw
end
