import std.fs

cdecl "write"
private expect foreign unsafe function __c_write(:int, :[int8], :int): int32
cdecl "read"
private expect foreign unsafe function __c_read(:int, :[int8], :int): int32
cdecl "fputs"
private expect foreign unsafe function __c_fputs(:[int8], :any): none
cdecl "_scl_get_stderr"
private expect foreign unsafe function __c_get_stderr(): any
cdecl "getchar"
private expect foreign unsafe function __c_getchar(): int8

cdecl "puts"
private expect foreign function puts0(:[int8]): none

function puts(val: [int8]): none val puts0 end
function puts(val: str): none    val:view puts end
function puts(f: float): none    f:toString:view puts end
function puts(f: float32): none  f as float:toString:view puts end
function puts(value: any): none  value builtinToString:view puts end

function eputs(s: [int8]): none  unsafe s __c_get_stderr __c_fputs c"\n" __c_get_stderr __c_fputs end end
function eputs(s: str): none     s:view eputs end
function eputs(f: float): none   f:toString:view eputs end
function eputs(f: float32): none f as float:toString:view eputs end
function eputs(value: any): none value builtinToString:view eputs end
