cdecl "write"
private expect foreign unsafe function __c_write(fileDescriptor: int, cstr: [int8], _len_: int): int32
cdecl "read"
private expect foreign unsafe function __c_read(fileDescriptor: int, buffer: [int8], amount: int): int32
cdecl "fprintf"
private expect foreign unsafe function __c_fprintf(fp: any, fmt: [int8], :varargs): int32
cdecl "printf"
private expect foreign unsafe function __c_printf(fmt: [int8], :varargs): int32
cdecl "getchar"
private expect foreign unsafe function __c_getchar(): int8

unsafe function write(fileDescriptor: int, string: str): none
  fileDescriptor string:view string:size __c_write drop
end

function read(fileDescriptor: int, amount: int): str
  new<int8>[amount] => decl buf: [int8]
  unsafe
    fileDescriptor buf amount __c_read drop
  end
  buf str::new return
end

function getchar(): int8
  unsafe
    __c_getchar
    return
  end
end

cdecl "puts"
private expect foreign function puts0(:[int8]): none

function puts(val: str): none    val:view puts0 end
function puts(val: [int8]): none val puts0 end
function puts(f: float): none    f:toString puts end
function puts(value: any): none  value:toString puts end

function eputs(s: [int8]): none
  unsafe
    c!
      (localstack++)->v = stderr;
    end
    "%s\n":view s __c_fprintf! 1
  end
  drop
end
function eputs(s: str): none
  s:view eputs
end
function eputs(f: float): none
  f:toString:view eputs
end
function eputs(value: any): none
  value:toString:view eputs
end

function putint(number: int): none
  number puts
end
function putfloat(number: float): none
  number:toString puts
end
