# Formatted IO
final static sealed struct ConsoleColor  
  function reset(): str   "\033[0m"  return end
  function black(): str   "\033[30m" return end
  function red(): str     "\033[31m" return end
  function green(): str   "\033[32m" return end
  function yellow(): str  "\033[33m" return end
  function blue(): str    "\033[34m" return end
  function magenta(): str "\033[35m" return end
  function cyan(): str    "\033[36m" return end
  function white(): str   "\033[37m" return end
  function bold(): str    "\033[1m"  return end
end

final static sealed struct FmtIO
  cdecl "putchar" private expect foreign function putchar(char: int8): none

  private function printStrNoNewline(s: str): none
    foreach c in s do
      c FmtIO::putchar
    done
  end

  function puts(fmt: str, args: varargs): none
    0 => decl current: int
    args:size => decl size: int
    # args:size puts
    # args puts
    # fmt puts
    for i in 0 to fmt:size do
      fmt[i] => decl c: int8
      # "c: " c:toString + puts
      # c '%' == puts
      if c '%' == then
        i++ => i
        fmt[i] => c
        if c '%' == then
          '%' FmtIO::putchar
          continue
        fi
        if current size >= then
          "Not enough arguments for format string" InvalidArgumentException::new throw
        fi
        args[current] => decl arg: any
        current++ => current
        if c 'i' == then
          arg int::toString FmtIO::printStrNoNewline
        elif c 's' == then
          arg as str FmtIO::printStrNoNewline
        elif c '@' == then
          if arg then
            arg as SclObject:toString FmtIO::printStrNoNewline
          else
            "(nil)" FmtIO::printStrNoNewline
          fi
        elif c 'f' == then
          arg float::fromBits:toString FmtIO::printStrNoNewline
        elif c 'p' == then
          arg int::toHexString FmtIO::printStrNoNewline
        elif c 'b' == then
          if arg as int 0 == then
            "false" FmtIO::printStrNoNewline
          else
            "true" FmtIO::printStrNoNewline
          fi
        elif c 'c' == then
          arg FmtIO::putchar
        else
          "Invalid format specifier at position #" i + InvalidArgumentException::new throw
        fi
      else
        c FmtIO::putchar
      fi
    done
  end
end
