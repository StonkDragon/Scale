import std.util.Stringifyable

cdecl "strlen"
private expect unsafe function __c_strlen(cstr: [int8]): int
cdecl "strcmp"
private expect unsafe function __c_strcmp(firstCStr: [int8], secondCStr: [int8]): int
cdecl "_scl_strdup"
private expect unsafe function __c_strdup(cstr: [int8]): [int8]
cdecl "_scl_strncmp"
private expect unsafe function __c_strncmp(firstCStr: [int8], secondCStr: [int8], amount: int): int
cdecl "_scl_strcpy"
private expect unsafe function __c_strcpy(dest: [int8], src: [int8]): [int8]
cdecl "strcat"
private expect unsafe function __c_strcat(dest: [int8], src: [int8]): [int8]
cdecl "strtok"
private expect unsafe function __c_strtok(:any, :[int8]): [int8]?

final sealed struct str is Equatable, Cloneable, Stringifyable, Iterable
  private decl _data: [int8]
  private decl _len: int
  private decl _hash: int

  function +(other: str): str
    other self:prepend return
  end

  function +(number: int): str
    number:toString self:prepend return
  end

  function +(number: float): str
    number:toString self:prepend return
  end

  function +(cStr: [int8]): str
    cStr str::new self:prepend return
  end

  function clone(): str
    self._data str::new return
  end

  function append(other: str): str
    other._data self:append return
  end

  function append(cStr: [int8]): str
    unsafe
      self._data cStr concat str::new return
    end
  end

  function prepend(other: str): str
    other._data self:prepend return
  end

  function prepend(cStr: [int8]): str
    unsafe
      cStr self._data concat str::new return
    end
  end

  function equals(other: any): bool
    if other is str ! then
      false return
    fi
    self._hash other as str._hash == return
  end

  function ==(other: any): bool
    other self:equals return
  end

  function size(): int
    self._len return
  end

  function at(i: int): int
    if i 0 < i self:size >= || then
      "Index " i:toString +
      " is out of bounds for string with length " +
      self:size:toString +
      IndexOutOfBoundsException::new throw
    fi
    self._data as int i + @:toInt8 as int return
  end

  function toString(): str
    self return
  end

  function @(i: int): int
    i self:at return
  end

  function [](index: int): int8
    index self:at return
  end

  function reverse(): str
    decl out: [int8]
    unsafe
      c!
        scl_int i = 0;
        scl_int len = strlen((*self)->_data);
        *out = _scl_alloc(len + 1);
        for (i = len - 1; i >= 0; i--) {
          (*out)[i] = (*self)->_data[len - i - 1];
        }
        (*out)[len] = '\0';
      end
    end
    out str::new
    out any::delete
    return
  end

  function toChars() _arr_: Array
    self:size Array::new => _arr_

    for _i_ in 0 to self:size do
      _i_ self:at _arr_:push
    done
    return
  end

  function split(delimiter: str): Array
    10 Array::new => decl arr: Array
    decl string: [int8]
    decl cDelim: [int8]
    unsafe  
      self:view __c_strdup => string
      delimiter:view __c_strdup => cDelim
    end
    unsafe
      string cDelim __c_strtok => decl line

      while line do
        line!! str::new arr:push
        nil cDelim __c_strtok => line
      done
    end

    string any::delete
    cDelim any::delete

    arr return
  end

  function startsWith(string: str): bool
    unsafe
      self._data string._data string:size __c_strncmp 0 == return
    end
  end

  function endsWith(string: str): bool
    if self._len string._len < then
      false return
    fi
    self._len string._len - self:subString => decl substr: str
    substr string ==
    
    substr any::delete

    return
  end

  function subString(start: int): str
    if start 0 == then
      self return
    fi
    if start self._len >= start 0 < || then
      "Index " start:toString +
      " is out of bounds for string with length " self:size:toString +
      +
      IndexOutOfBoundsException::new throw
    fi

    self._data => decl tmp: any

    tmp as int start + => tmp
    tmp as [int8] str::new return
  end

  function view(): [int8]
    unsafe
      self._data __c_strdup return
    end
  end

  function init(data: [int8]): none
    unsafe
      data __c_strdup => data
      data __c_strlen => self._len
    end
    data => self._data
    data builtinHash => self._hash
  end

  function iterate(): StringIterator
    self StringIterator::new return
  end

  function hashCode(): int
    self._hash return
  end

  private unsafe function concat(firstCStr: [int8], secondCStr: [int8]): [int8]
    firstCStr __c_strlen => decl len: int
    secondCStr __c_strlen => decl len2: int
    new[len len2 + 1 +] => decl out: [int8]

    out firstCStr __c_strcpy drop
    out secondCStr __c_strcat drop

    out return
  end
end

final sealed struct StringIterator is Iterator
  private decl _str: str
  private decl _pos: int

  function init(s: str): none
    s => self._str
    0 => self._pos
  end

  function next(): int8
    self._pos 1 + => self._pos
    self._str[self._pos 1 -] return
  end

  function hasNext(): bool
    self._pos self._str:size < return
  end
end

function +(s: str, i: int): str
  s i:toString + return
end

function +(s: str, f: float): str
  s f:toString + return
end
