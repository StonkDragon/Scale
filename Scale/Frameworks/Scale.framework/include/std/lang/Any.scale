private expect foreign unsafe function scale_realloc(ptr: any, size: int): any
private expect foreign unsafe function scale_alloc(size: int): any
private expect foreign unsafe function scale_free(ptr: any): none
private expect foreign unsafe function scale_sizeof(ptr: any): int

final static struct any
    function new(sz: int): any
        unsafe
            sz scale_alloc return
        end
    end

    function delete(ptr: any): none
        unsafe
            ptr scale_free return
        end
    end
    
    function size(ptr: any): int
        unsafe
            ptr scale_sizeof return
        end
    end

    function resize(newSize: int, ptr: any): any
        unsafe
            ptr newSize scale_realloc return
        end
    end

    function default(): any
        sizeof any any::new return
    end

    function toString(x: any): str
        x as int:toString
        return
    end

    function toHexString(x: any): str
        x as int:toHexString
        return
    end

    function referenceEquals(one: any, other: any): bool
        one as int other as int == return
    end

    function asReference(x: any): Box<any>
        Box<any> {
            x => value
        } return
    end
end

template<T>
struct Box
    decl value: const T

    init(value: T)
        value => self.value
    end

    function equals(other: any): bool
        if other is Box<T> then
            (other as Box<T>).value self.value == return
        elif other is T then
            ref other as *T @ self.value == return
        else
            false return
        fi
    end
    function ==(other: any): bool
        other self:equals return
    end
    function !=(other: any): bool
        other self:equals ! return
    end
end
