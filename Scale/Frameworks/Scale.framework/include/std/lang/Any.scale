private expect foreign unsafe function _scl_realloc(ptr: any, size: int): any
private expect foreign unsafe function _scl_alloc(size: int): any
private expect foreign unsafe function _scl_free(ptr: any): none
private expect foreign unsafe function _scl_sizeof(ptr: any): int

final static sealed struct any
    function new(sz: int): any
        unsafe
            sz _scl_alloc return
        end
    end

    function delete(ptr: any): none
        unsafe
            ptr _scl_free return
        end
    end
    
    function size(ptr: any): int
        unsafe
            ptr _scl_sizeof return
        end
    end

    function resize(newSize: int, ptr: any): any
        unsafe
            ptr newSize _scl_realloc return
        end
    end

    function default(): any
        sizeof any any::new return
    end

    function toString(x: any): str
        x as int:toString
        return
    end

    function toHexString(x: any): str
        x as int:toHexString
        return
    end

    function referenceEquals(one: any, other: any): bool
        one as int other as int == return
    end

    function asReference(x: any): Any
        x Any::new return
    end
end

struct Any
    decl value: readonly any

    static function valueOf(x: any): Any
        x Any::new return
    end

    function init(x: any): none
        x => self.value
    end
    function equals(other: any): bool
        other self == return
    end
    function ==(other: any): bool
        if other is Any then
            other as Any.value as int self.value as int == return
        else
            other self.value == return
        fi
    end
    function !=(other: any): bool
        if other is Any then
            other as Any.value as int self.value as int != return
        else
            other self.value != return
        fi
    end
    function @(): any
        self.value as [any] @ return
    end

    function toString(): str
        self.value:toString return
    end
end
