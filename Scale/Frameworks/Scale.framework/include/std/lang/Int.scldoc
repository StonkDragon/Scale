
@std.Int
@@{frameworkPath}/include/std/lang/Int.scale
## Int
### reified operator function +<A, B>(a: A, b: B): A | B
Returns the sum of `a` and `b`.
Return type is the larger type of `A` or `B`.

### reified operator function -<A, B>(a: A, b: B): A | B
Returns the difference of `a` and `b`.
Return type is the larger type of `A` or `B`.

### reified operator function *<A, B>(a: A, b: B): A | B
Returns the product of `a` and `b`.
Return type is the larger type of `A` or `B`.

### reified operator function /<A, B>(a: A, b: B): A | B
Returns the quotient of `a` and `b`.
Return type is the larger type of `A` or `B`.

### reified operator function **<A, B>(a: A, b: B): A | B
Returns `a` raised to the power of `b`.
Return type is the larger type of `A` or `B`.

### reified operator function /.<A, >(a: A, b: A): A
Returns the gcd value of `a` and `b`.

### reified operator function *.<A, >(a: A, b: A): A
Returns the lcm value of `a` and `b`.

### reified operator function >.<A, >(a: A, b: A): A
Returns the bigger value of `a` and `b`.

### reified operator function <.<A, >(a: A, b: A): A
Returns the smaller value of `a` and `b`.

### reified operator function %<A, >(a: A, b: int): A
Returns the remainder of `a` divided by `b`.

### reified operator function &<A, >(a: A, b: int): A
Returns the bitwise AND of `a` and `b`.

### reified operator function |<A, >(a: A, b: int): A
Returns the bitwise OR of `a` and `b`.

### reified operator function ^<A, >(a: A, b: int): A
Returns the bitwise XOR of `a` and `b`.

### reified operator function ~<A>(a: A): A
Returns the bitwise NOT of `a`.

### reified operator function <<<A, >(a: A, b: int): A
Returns `a` shifted left by `b` bits.

### reified operator function >><A, >(a: A, b: int): A
Returns `a` shifted right by `b` bits.

### reified operator function <<<<A, >(a: A, b: int): A
Returns `a` rotated left by `b` bits.

### reified operator function >>><A, >(a: A, b: int): A
Returns `a` rotated right by `b` bits.

### reified operator function == <A?, B?>(a: A?, b: B?): bool
Returns true if `a` and `b` represent the same value.

### reified operator function != <A?, B?>(a: A?, b: B?): bool
Returns true if `a` and `b` do not represent the same value.

### reified operator function < <A?, B?>(a: A?, b: B?): bool
Returns true if `a` is less than `b`.

### reified operator function > <A?, B?>(a: A?, b: B?): bool
Returns true if `a` is greater than `b`.

### reified operator function <= <A?, B?>(a: A?, b: B?): bool
Returns true if `a` is less than or equal to `b`.

### reified operator function >= <A?, B?>(a: A?, b: B?): bool
Returns true if `a` is greater than or equal to `b`.

### reified operator function ++ <A>(a: A): A
Returns the value of `a` incremented by 1.

### reified operator function -- <A>(a: A): A
Returns the value of `a` decremented by 1.

### reified operator function @<[T]>(a: [T]): T
Dereferences the pointer `a`.
This operator does not do a `nil` check. Also use `!!` or `?:` if you want that.

### reified operator function !!<T?>(a: T?): T
Returns `a` if `a` is not nil, otherwise throws an error.

### reified operator function ?:<T?, >(a: T?, b: T): T
Returns `a` if `a` is not nil, otherwise returns `b`.

### operator function &&(a: int, b: int): bool
Returns `true` if both `a` and `b` are `true`.

### operator function ||(a: int, b: int): bool
Returns `true` if `a` or `b` is `true`.

### operator function !(a: int): bool
Returns `true` if `a` is `false` and `false` if `a` is `true`.

### final static struct bool
The static struct `bool` provides utility functions for working with the `bool` type.

### static function bool::toString(b: bool): str
Returns a string representation of `b`.

### static function bool::parse(s: str): bool
Returns `true` if `s` is the string `"true"`.
Returns `false` if `s` is the string `"false"`.
Otherwise, try to parse `s` as a number and return `true` if it is non-zero.
Returns `false` if `s` does not start with a number and is not equal to `"false"`.

### final static struct int8
The static struct `int8` provides utility functions for working with the `int8` type.
All functions available on the `int` type are also available on this type.

### final static struct int16
The static struct `int16` provides utility functions for working with the `int16` type.
All functions available on the `int` type are also available on this type.

### final static struct int32
The static struct `int32` provides utility functions for working with the `int32` type.
All functions available on the `int` type are also available on this type.

### final static struct int64
The static struct `int64` provides utility functions for working with the `int64` type.
All functions available on the `int` type are also available on this type.

### final static struct int
The static struct `int` provides utility functions for working with the `int` type.

### final static struct uint8
The static struct `uint8` provides utility functions for working with the `uint8` type.
All functions available on the `int` type are also available on this type.

### final static struct uint16
The static struct `uint16` provides utility functions for working with the `uint16` type.
All functions available on the `int` type are also available on this type.

### final static struct uint32
The static struct `uint32` provides utility functions for working with the `uint32` type.
All functions available on the `int` type are also available on this type.

### final static struct uint64
The static struct `uint64` provides utility functions for working with the `uint64` type.
All functions available on the `int` type are also available on this type.

### final static struct uint
The static struct `uint` provides utility functions for working with the `uint` type.
All functions available on the `int` type are also available on this type.

### static function int::toString(x: int): str
Returns a string representation of `x`.

### static function int::toHexString(x: int): str
Returns a hexadecimal string representation of `x`.

### static function int::parse(s: str): int
Parses `s` as an int and returns the result.

### static function int::asReference(i: int): Box<int>
Returns a new instance of `Box<int>` that represents the value `i`.

### function isnil(x: any): bool
Returns true if `x` is nil.

### function isnotnil(x: any): bool
Returns true if `x` is not nil.
