
@std.Int
@@{frameworkPath}/include/std/lang/Int.scale
## Int
### operator function +(a: int | float | float32, b: int | float | float32): int | float | float32
Returns the sum of `a` and `b`.

### operator function -(a: int | float | float32, b: int | float | float32): int | float | float32
Returns the difference of `a` and `b`.

### operator function *(a: int | float | float32, b: int | float | float32): int | float | float32
Returns the product of `a` and `b`.

### operator function /(a: int | float | float32, b: int | float | float32): int | float | float32
Returns the quotient of `a` and `b`.

### operator function **(a: int | float | float32, b: int | float | float32): int | float | float32
Returns `a` raised to the power of `b`.

### operator function %(a: int, b: int): int
Returns the remainder of `a` divided by `b`.

### operator function &(a: int, b: int): int
Returns the bitwise AND of `a` and `b`.

### operator function |(a: int, b: int): int
Returns the bitwise OR of `a` and `b`.

### operator function ^(a: int, b: int): int
Returns the bitwise XOR of `a` and `b`.

### operator function ~(a: int): int
Returns the bitwise NOT of `a`.

### operator function <<(a: int, b: int): int
Returns `a` shifted left by `b` bits.

### operator function >>(a: int, b: int): int
Returns `a` shifted right by `b` bits.

### operator function <<<(a: int, b: int): int
Returns `a` rotated left by `b` bits.

### operator function >>>(a: int, b: int): int
Returns `a` rotated right by `b` bits.

### operator function ==(a: int | float | float32, b: int | float | float32): bool
Returns true if `a` and `b` represent the same value.

### operator function !=(a: int | float | float32, b: int | float | float32): bool
Returns true if `a` and `b` do not represent the same value.

### operator function <(a: int | float | float32, b: int | float | float32): bool
Returns true if `a` is less than `b`.

### operator function >(a: int | float | float32, b: int | float | float32): bool
Returns true if `a` is greater than `b`.

### operator function <=(a: int | float | float32, b: int | float | float32): bool
Returns true if `a` is less than or equal to `b`.

### operator function >=(a: int | float | float32, b: int | float | float32): bool
Returns true if `a` is greater than or equal to `b`.

### operator function ++(a: int | float | float32): int | float | float32
Returns the value of `a` incremented by 1.

### operator function --(a: int | float | float32): int | float | float32
Returns the value of `a` decremented by 1.

### operator function @<[T]>(a: [T]): T
Dereferences the pointer `a`.
This operator does not do a `nil` check. Also use `!!` or `?:` if you want that.

### operator function !!<T?>(a: T?): T
Returns `a` if `a` is not nil, otherwise throws an error.

### operator function ?:<T?, >(a: T?, b: T): T
Returns `a` if `a` is not nil, otherwise returns `b`.

### final static struct int8
The static struct `int8` provides utility functions for working with the `int8` type.
All functions available on the `int` type are also available on this type.

### final static struct int16
The static struct `int16` provides utility functions for working with the `int16` type.
All functions available on the `int` type are also available on this type.

### final static struct int32
The static struct `int32` provides utility functions for working with the `int32` type.
All functions available on the `int` type are also available on this type.

### final static struct int64
The static struct `int64` provides utility functions for working with the `int64` type.
All functions available on the `int` type are also available on this type.

### final static struct int
The static struct `int` provides utility functions for working with the `int` type.

### final static struct uint8
The static struct `uint8` provides utility functions for working with the `uint8` type.
All functions available on the `int` type are also available on this type.

### final static struct uint16
The static struct `uint16` provides utility functions for working with the `uint16` type.
All functions available on the `int` type are also available on this type.

### final static struct uint32
The static struct `uint32` provides utility functions for working with the `uint32` type.
All functions available on the `int` type are also available on this type.

### final static struct uint64
The static struct `uint64` provides utility functions for working with the `uint64` type.
All functions available on the `int` type are also available on this type.

### final static struct uint
The static struct `uint` provides utility functions for working with the `uint` type.
All functions available on the `int` type are also available on this type.

### static function int::toString(x: int): str
Returns a string representation of `x`.

### static function int::toHexString(x: int): str
Returns a hexadecimal string representation of `x`.

### static function int::parse(s: str): int
Parses `s` as an int and returns the result.

### static function int::asReference(i: int): Int
Returns a new instance of `Int` that represents the value `i`.

### struct Int
The struct `Int` is the reference type that represents the `int` type.
Declared Fields:
- `value: readonly int` - The value of the `Int` instance.

### static function Int::valueOf(x: int): Int
Returns a new instance of `Int` that represents the value `x`.

### function Int:equals(other: any): bool
Returns true if `self` and `other` represent the same value.

### function Int:==(other: any): bool
Returns true if `self` and `other` represent the same value.

### function Int:@(): int
Returns the int value of this `Int` instance.

### function Int:toString(): str
Returns a string representation of this `Int` instance.

### function isnil(x: any): bool
Returns true if `x` is nil.

### function isnotnil(x: any): bool
Returns true if `x` is not nil.
