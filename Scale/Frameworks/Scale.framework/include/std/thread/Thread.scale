final sealed struct ThreadException: Exception
    function init(msg: str): none
        msg => self.msg
    end
end

final sealed struct AtomicOperationException: Exception
    function init(msg: str): none
        msg => self.msg
    end
end

final sealed open struct MutexError: Error

final sealed struct Thread
    private static (TypedArray<Thread>::new) => decl threads: const Array
    private static decl nextID: int

    static (
        Thread static {
            "Main Thread" => name
            nil => func
            nil => tid
        }
    ) => decl mainThread: const Thread

    private decl func: any
    private decl tid: any

    decl name: str

    static function stackTrace(): [str]
        Process::stackTrace return
    end

    expect foreign static function currentThread(): Thread

    function init(func: lambda(): none): none
        func => self.func
        nil => self.tid
        "Thread " Thread::nextID:toString + => self.name
        Thread::nextID 1 + => Thread::nextID
    end

    private expect foreign unsafe function detach0(): none
    private expect foreign unsafe function start0(): none
    private expect foreign unsafe function stop0(): none
    private expect foreign unsafe function run(): none

    function start(): none
        if tid then
            "Thread started" ThreadException::new
            throw
        fi
        unsafe
            self:start0
            unless self.tid then
                "Thread start failed" ThreadException::new
                throw
            fi
        end
    end

    function join(): none
        unless tid then
            "Thread ended" ThreadException::new
            throw
        fi
        unsafe
            self:stop0
        end
        nil => self.tid
    end

    function detach(): none
        unless tid then
            "Non-running thread cannot be detached" ThreadException::new
            throw
        fi
        unsafe
            self:detach0
        end
    end

    function equals(other: any): bool
        if other is Thread ! then
            false return
        fi
        other as Thread:lock
        self other as Thread ==
        other as Thread:unlock
        return
    end

    function ==(other: any): bool
        if other is Thread ! then
            false return
        fi
        other as Thread:lock
        self.tid as int other as Thread.tid as int ==
        other as Thread:unlock
        return
    end

    function !=(other: any): bool
        other self == ! return
    end
end
