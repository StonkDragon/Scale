import std.threading.Thread

final struct AtomicObject
    private decl value: SclObject
    private decl mutex: pthread_mutex_t

    function init(val: SclObject): none
        val => self.value
        unsafe
            if ref self.mutex nil as [pthread_mutexattr_t] __c_pthread_mutex_init 0 != then
                "Failed to create mutex" AtomicOperationException::new throw
            fi
        end
    end

    function get(): SclObject
        self.value return
    end

    function set(val: SclObject): none
        val => self.value
    end

    function getAndSet(val: SclObject): none
        unsafe
            ref self.mutex __c_pthread_mutex_lock
        end

        self.value => decl tmp
        val => self.value

        unsafe
            ref self.mutex __c_pthread_mutex_unlock
        end
        tmp return
    end

    function compareAndSet(expected: SclObject, val: SclObject): bool
        unsafe
            ref self.mutex __c_pthread_mutex_lock
        end

        if self.value expected == then
            val => self.value
            unsafe
                ref self.mutex __c_pthread_mutex_unlock
            end
            true return
        fi

        unsafe
            ref self.mutex __c_pthread_mutex_unlock
        end
        false return
    end

    function toString(): str
        self.value:toString return
    end
end
