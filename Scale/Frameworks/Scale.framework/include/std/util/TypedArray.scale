import std.util.Array
import std.util.ReadOnlyArray

template<T>
sealed struct TypedArrayIterator is Iterator
  private decl array: TypedArray<T>
  private decl pos: int

  function init(arr: TypedArray<T>): none
    arr => self.array
    0 => self.pos
  end

  function hasNext(): bool
    self.pos self.array.count < return
  end

  function next(): T
    self.pos 1 + => self.pos
    self.array[self.pos 1 -] return
  end
end

template<T>
final sealed struct TypedArray: Array
    overrides function [](index: int): T
        index self:get return
    end

    overrides function get(index: int): T
        if index 0 < index self.count >= || then
            "Index "
            index:toString +
            " is out of bounds for Array of length " +
            self.count:toString +
            "!" +
            IndexOutOfBoundsException::new throw
        fi
        self.values[index] as T return
    end

    overrides function =>[](index: int, value: T): none
        index value self:set
    end

    overrides function set(index: int, value: T): none
        if index 0 < index self.capacity >= || then
            "Index "
            index:toString +
            " is out of bounds for Array of capacity " +
            self.capacity:toString +
            "!" +
            IndexOutOfBoundsException::new
            throw
        fi
        
        if index self.count >= then
            index 1 + => self.count
        fi

        value => self.values[index]
    end

    overrides function top(): T
        if self.count 0 <= then
            "Cannot invoke Array:top on an empty Array!" IndexOutOfBoundsException::new throw
        fi
        self.values[self.count 1 -] as T return
    end

    overrides function push(value: T): none
        if self.count self.capacity >= then
            self.capacity self.initCap + => self.capacity
            self.capacity self.values:resize => self.values
        fi

        value => self.values[self.count]
        self.count 1 + => self.count
    end

    overrides function indexOf(val: T): int
        for i in 0 to self.count do
            if i self:get val == then
                i return
            fi
        done
        -1 return
    end

    overrides function insert(elem: T, index: int): none
        if index 0 < index self.count >= || then
            "Index "
            index:toString +
            " is out of bounds for Array of length " +
            self.count:toString +
            "!" +
            IndexOutOfBoundsException::new throw
        fi
        self.count 1 + => self.count
        if self.count self.capacity >= then
            self.capacity 2 * => self.capacity
            self.capacity self.values:resize => self.values
        fi
        for i in self.count 1 - to index step -- do
            self[i 1 -] => self[i]
        done
        elem => self[index]
    end

    overrides function contains(val: T): bool
        val self:indexOf -1 != return
    end

    overrides function remove(val: T): none
        val self:indexOf => decl index
        for i in index to self.count 1 - do
            i (i 1 + self:get) self:set
        done
        self.count 1 - => self.count
    end

    overrides function removeAll(val: T): none
        while val self:indexOf -1 != do
            val self:remove
        done
    end

    overrides function iterate(): TypedArrayIterator<T>
        self TypedArrayIterator<T>::new return
    end
end
