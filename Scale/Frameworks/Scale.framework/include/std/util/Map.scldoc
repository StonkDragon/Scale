@std.util.Map
@@{frameworkPath}/include/std/util/Map.scale
## Util: Map
### final struct MapEntry<T>
The struct `MapEntry` represents an entry in a map.
Declared Fields:
- `key: str` - The key of the entry.
- `value: T` - The value of the entry.

### static function MapEntry<T>::new(key: str, value: T): MapEntry
Returns a new instance of `MapEntry` with the key `key` and the value `value`.

### function MapEntry:toString(): str
Returns a string representation of this `MapEntry` instance.

### struct Map<T> is Iterable
The struct `Map` represents a map.

### static function Map<T>::new(size: int): Map
Returns a new instance of `Map` with the size `size`.

### function Map<T>:[](key: str): T
Returns the value for the key `key` in `self`.
Throws an `InvalidArgumentException` if `key` is not in `self`.

### function Map<T>:get(key: str): T
Returns the value for the key `key` in `self`.
Throws an `InvalidArgumentException` if `key` is not in `self`.

### function Map<T>:=>[](key: str, value: T): none
Sets the value for the key `key` in `self` to `value`.

### function Map<T>:containsKey(key: str): bool
Returns true if `key` is in `self`.

### function Map<T>:set(key: str, value: T): none
Sets the value for the key `key` in `self` to `value`.

### function Map<T>:iterate(): Iterator
Returns an iterator over the entries of `self`.

### function Map<T>:toString(): str
Returns a string representation of `self`.

### function Map<T>:map(x: lambda(MapEntry): none): none
Applies `x` to each entry in `self`.

### struct MapIterator<T> is Iterator
The struct `MapIterator` is an iterator over the entries of a map.

### static function MapIterator<T>::new(data: Array): MapIterator<T>
Returns a new instance of `MapIterator` that iterates over the entries of `data`.

### function MapIterator<T>:hasNext(): bool
Returns true if there are more entries to iterate over.

### function MapIterator<T>:next(): MapEntry<T>
Returns the next entry in the map.
