import std.util.Pair
import std.util.Iterable
import std.util.InvalidArgumentException

final sealed struct MapEntry<T: SclObject>
  decl key: str
  decl value: T

  function init(key: str, value: T): none
    key => self.key
    value => self.value
  end

  function toString(): str
    key ": " + value:toString + return
  end
end

sealed struct Map<T: SclObject> is Iterable
  private decl data: TypedArray<MapEntry<SclObject>>

  function init(size: int): none
    size TypedArray<MapEntry<SclObject>>::new => self.data
  end

  function [](key: str): T
    key self:get return
  end

  function get(key: str): T
    for i in 0 to self.data.count do
      self.data[i] => decl entry: MapEntry<SclObject>
      if entry.key key == then
        entry.value as T return
      fi
    done
    "Key '" key + "' not found in map" + InvalidArgumentException::new throw
  end

  function =>[](key: str, value: T): none
    key value self:set
  end

  function containsKey(key: str): bool
    for i in 0 to self.data.count do
      if self.data[i].key key == then
        true return
      fi
    done
    false return
  end

  function set(key: str, value: T): none
    for i in 0 to self.data.count do
      i self.data:get => decl entry: MapEntry<SclObject>?
      if entry nil == then
        i (key value MapEntry<SclObject>::new) self.data:set
        return
      elif entry!!.key key == then
        value => entry.value
        return
      fi
    done
    key value MapEntry<SclObject>::new self.data:push
  end

  function iterate(): Iterator
    self.data MapIterator::new return
  end

  function toString(): str
    self.data:toString return
  end

  function map(x: lambda(MapEntry<SclObject>): none): none
    for i in 0 to self.data.count do
      self.data[i] x:accept
    done
  end
end

sealed struct MapIterator is Iterator
  private decl data: ArrayIterator

  function init(data: Array): none
    data ArrayIterator::new => self.data
  end

  function hasNext(): bool
    self.data:hasNext return
  end

  function next(): MapEntry<SclObject>
    self.data:next as MapEntry<SclObject> return
  end
end
