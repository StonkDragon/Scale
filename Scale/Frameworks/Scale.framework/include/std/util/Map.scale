import std.util.Pair
import std.util.Iterable

final sealed struct MapEntry
  decl key: str
  decl value: any

  function init(key: str, value: any): none
    key => self.key
    value => self.value
  end

  function toString(): str
    key ": " + value:toString + return
  end
end

sealed struct Map is IIterable
  private decl data: Array

  function init(size: int): none
    size Array::new => self.data
    for i in 0 to size do
      nil self.data:push
    done
  end

  function get(key: str): any?
    self Process::lock
    foreach entry in self.data do
      if entry nil == then continue fi

      entry => decl notNilEntry: MapEntry
      if notNilEntry.key nil == then continue fi
      if key notNilEntry.key == then
        self Process::unlock
        notNilEntry.value return
      fi
    done
    self Process::unlock
    nil return
  end

  function set(key: str, value: any): none
    self Process::lock
    for i in 0 to self.data.count do
      i self.data:get => decl entry: mut MapEntry?
      if entry nil == then
        i key value MapEntry::new self.data:set
        self Process::unlock
        return
      elif entry as MapEntry.key key:equals then
        value => entry.value
        self Process::unlock
        return
      fi
    done
    key value MapEntry::new self.data:push
    self Process::unlock
  end

  function begin(): none
    self.data:begin
  end

  function hasNext(): bool
    self.data:hasNext return
  end

  function next(): MapEntry?
    self.data:next as MapEntry? return
  end

  function toString(): str
    self.data:toString return
  end

  function map(x: lambda(MapEntry): none): none
    self Process::lock
    foreach value in self.data do
      if value then
        value x:accept
      fi
    done
    self Process::unlock
  end
end
