import std.util.Iterable

final struct Range is Iterable
  decl lower: int
  decl upper: int
  
  init(lower: int, upper: int)
    if lower upper > then
      "lower must not be bigger than upper!" InvalidArgumentException::new throw
    fi

    lower => self.lower
    upper => self.upper
  end

  function containsRange(other: Range): int
    other.lower self:contains other.upper self:contains && return
  end

  function overlaps(other: Range): int
    other.lower self:contains other.upper self:contains || return
  end

  function contains(x: int): int
    x self.lower >=
    x self.upper < &&
    return
  end

  const function toString(): str
    lower:toString " to " + upper:toString + return
  end

  function iterate(): RangeIterator
    self RangeIterator::new return
  end

  function toReverseRange(): ReverseRange
    self.upper 1 - self.lower 1 - ReverseRange::new return
  end

  function toList(): [int]
    upper lower - => decl size: int
    new<int>[size] => decl list: [int]
    0 => decl i: int
    foreach val in self do
      val => list[i]
      i 1 +> i
    done
    list return
  end
end

final struct ReverseRange is Iterable
  decl upper: int
  decl lower: int

  init(upper: int, lower: int)
    if upper lower < then
      "upper must not be smaller than lower!" InvalidArgumentException::new throw
    fi
    upper => self.upper
    lower => self.lower
  end

  const function toString(): str
    upper:toString " to " + lower:toString + return
  end

  function iterate(): ReverseRangeIterator
    self ReverseRangeIterator::new return
  end

  function toRange(): Range
    self.lower 1 + self.upper 1 + Range::new return
  end

  function toList(): [int]
    upper lower - => decl size: int
    new<int>[size] => decl list: [int]
    0 => decl i: int
    foreach val in self do
      val => list[i]
      i 1 +> i
    done
    list return
  end
end

final struct RangeIterator is Iterator
  private decl cur: int
  private decl last: int

  init(r: Range)
    r.lower => self.cur
    r.upper => self.last
  end

  function hasNext(): bool
    self.cur self.last <
    return
  end

  function next(): int
    self.cur 1 + => self.cur
    self.cur 1 - return
  end
end

final struct ReverseRangeIterator is Iterator
  private decl cur: int
  private decl last: int

  init(r: ReverseRange)
    r.lower => self.last
    r.upper => self.cur
  end

  function hasNext(): bool
    self.cur self.last > return
  end

  function next(): int
    self.cur 1 - => self.cur
    self.cur 1 + return
  end
end

final struct UnboundRange is Iterable
  function iterate(): UnboundRangeIterator
    UnboundRangeIterator::new return
  end

  const function toString(): str
    "to" return
  end
end

final struct UnboundRangeIterator is Iterator
  private decl i: int

  init()
    int::minValue => i
  end

  function hasNext(): bool
    i int::maxValue != return
  end

  function next(): int
    i
    i 1 +> i
    return
  end
end

final struct PartialRange is Iterable
  private decl hasUpperBound: bool
  private decl bound: int

  init() end

  static function lowerBound(bound: int): PartialRange
    PartialRange::new => decl range: PartialRange
    bound => range.bound
    range return
  end

  static function upperBound(bound: int): PartialRange
    PartialRange::new => decl range: PartialRange
    bound => range.bound
    true => range.hasUpperBound
    range return
  end

  function iterate(): RangeIterator
    if hasUpperBound then
      (int::minValue to bound):iterate return
    else
      (bound to int::maxValue):iterate return
    fi
  end

  const function toString(): str
    if hasUpperBound then
      "to " bound + return
    else
      bound " to" + return
    fi
  end
end
