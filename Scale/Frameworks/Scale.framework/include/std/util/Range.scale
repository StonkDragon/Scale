import std.util.Iterable

final sealed struct Range is Iterable
  decl lower: int
  decl upper: int
  
  function init(theStart: int, theEnd: int): none
    if theStart theEnd > then
      "start must not be bigger than end!" InvalidArgumentException::new throw
    fi

    theStart => self.lower
    theEnd => self.upper
  end

  function containsRange(other: Range): int
    if other.lower self:contains other.upper self:contains && then
      true return
    fi
    false return
  end

  function overlaps(other: Range): int
    if other.lower self:contains other.upper self:contains || then
      true return
    fi
    false return
  end

  function contains(pos: int): int
    if pos self.lower >= then
      if pos self.upper <= then
        true return
      fi
    fi
    false return
  end

  function toString(): str
    lower:toString " .. " + upper:toString + return
  end

  function iterate(): RangeIterator
    self RangeIterator::new return
  end

  function toReverseRange(): ReverseRange
    self.upper self.lower ReverseRange::new return
  end

  function toList(): [int]
    upper lower - => decl size: int
    new<int>[size] => decl list: [int]
    0 => decl i: int
    foreach val in self do
      val => list[i]
      i 1 +> i
    done
    list return
  end
end

final sealed struct ReverseRange is Iterable
  decl lower: int
  decl upper: int

  function init(theStart: int, theEnd: int): none
    if theStart theEnd < then
      "end must not be bigger than start!" InvalidArgumentException::new throw
    fi
    theStart => self.lower
    theEnd => self.upper
  end

  function toString(): str
    lower:toString " .. " + upper:toString + return
  end

  function iterate(): ReverseRangeIterator
    self ReverseRangeIterator::new return
  end

  function toRange(): Range
    self.upper self.lower Range::new return
  end

  function toList(): [int]
    lower upper - => decl size: int
    new<int>[size] => decl list: [int]
    0 => decl i: int
    foreach val in self do
      val => list[i]
      i 1 +> i
    done
    list return
  end
end

sealed struct RangeIterator is Iterator
  private decl range: Range
  private decl pos: int

  function init(theRange: Range): none
    theRange => self.range
    0 => self.pos
  end

  function hasNext(): bool
    self.pos self.range.lower + self.range.upper <= return
  end

  function next(): int
    self.range.lower self.pos +
    self.pos 1 + => self.pos
    return
  end
end

sealed struct ReverseRangeIterator is Iterator
  private decl range: ReverseRange
  private decl pos: int

  function init(theRange: ReverseRange): none
    theRange => self.range
    0 => self.pos
  end

  function hasNext(): bool
    self.range.lower self.pos - self.range.upper >= return
  end

  function next(): int
    self.pos 1 + => self.pos
    self.range.lower self.pos -
    return
  end
end

struct UnboundRange is Iterable
  function iterate(): UnboundRangeIterator
    UnboundRangeIterator::new return
  end

  function toString(): str
    "( .. )" return
  end
end

struct UnboundRangeIterator is Iterator
  private decl i: int

  function init(): none
    int::minValue => i
  end

  function hasNext(): bool
    i int::maxValue != return
  end

  function next(): int
    i
    i 1 +> i
    return
  end
end

struct PartialRange is Iterable
  private decl hasUpperBound: bool
  private decl bound: int

  function init(): none
  end

  static function lowerBound(bound: int): PartialRange
    PartialRange::new => decl range: PartialRange
    bound => range.bound
    range return
  end

  static function upperBound(bound: int): PartialRange
    PartialRange::new => decl range: PartialRange
    bound => range.bound
    true => range.hasUpperBound
    range return
  end

  function iterate(): RangeIterator
    if hasUpperBound then
      (int::minValue to bound):iterate return
    else
      (bound to int::maxValue):iterate return
    fi
  end

  function toString(): str
    if hasUpperBound then
      ".. " bound + return
    else
      bound " .." + return
    fi
  end
end
