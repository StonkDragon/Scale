import std.util.Iterable

final sealed struct Range is Iterable
  decl lower: int
  decl upper: int
  
  private decl pos: int

  function init(theStart: int, theEnd: int): none
    if theStart theEnd > then
      "start must not be bigger than end!" InvalidArgumentException::new throw
    fi

    theStart => self.lower
    theEnd => self.upper
    0 => self.pos
  end

  function containsRange(other: Range): int
    if other.lower self:contains other.upper self:contains && then
      true return
    fi
    false return
  end

  function overlaps(other: Range): int
    if other.lower self:contains other.upper self:contains || then
      true return
    fi
    false return
  end

  function contains(pos: int): int
    if pos self.lower >= then
      if pos self.upper <= then
        true return
      fi
    fi
    false return
  end

  function toString(): str
    lower:toString " .. " + upper:toString + return
  end

  function iterate(): Iterator
    self RangeIterator::new return
  end

  # function begin(): none
  #   0 => self.pos
  # end

  # function hasNext(): bool
  #   self.pos self.lower + self.upper <= return
  # end

  # function next(): int
  #   self.lower self.pos +
  #   self.pos 1 + => self.pos
  #   return
  # end

  function toReverseRange(): ReverseRange
    self.upper self.lower ReverseRange::new return
  end
end

final sealed struct ReverseRange is Iterable
  decl lower: int
  decl upper: int
  decl pos: int

  function init(theStart: int, theEnd: int): none
    if theStart theEnd < then
      "end must not be bigger than start!" InvalidArgumentException::new throw
    fi
    theStart => self.lower
    theEnd => self.upper
    0 => self.pos
  end

  function toString(): str
    lower:toString " .. " + upper:toString + return
  end

  function iterate(): Iterator
    self ReverseRangeIterator::new return
  end

  # function begin(): none
  #   0 => self.pos
  # end
  
  # function hasNext(): bool
  #   self.lower self.pos - self.upper >= return
  # end

  # function next(): int
  #   self.lower self.pos -
  #   self.pos 1 + => self.pos
  #   return
  # end

  function toRange(): Range
    self.upper self.lower Range::new return
  end
end

sealed struct RangeIterator is Iterator
  private decl range: Range
  private decl pos: int

  function init(theRange: Range): none
    theRange => self.range
    0 => self.pos
  end

  function hasNext(): bool
    self.pos self.range.lower + self.range.upper <= return
  end

  function next(): int
    self.range.lower self.pos +
    self.pos 1 + => self.pos
    return
  end
end

sealed struct ReverseRangeIterator is Iterator
  private decl range: ReverseRange
  private decl pos: int

  function init(theRange: ReverseRange): none
    theRange => self.range
    0 => self.pos
  end

  function hasNext(): bool
    self.range.lower self.pos - self.range.upper >= return
  end

  function next(): int
    self.range.lower self.pos -
    self.pos 1 + => self.pos
    return
  end
end
