import std.math

static struct Filters
    function all(_: int): bool
        true return
    end
    function positive(val: int): bool
        val 0 > return
    end
    function negative(val: int): bool
        val 0 < return
    end
    function even(val: int): bool
        val 2 % 0 == return
    end
    function odd(val: int): bool
        val 2 % 0 != return
    end
    function zero(val: int): bool
        val 0 == return
    end
    function nonZero(val: int): bool
        val 0 != return
    end
end

static struct Maps
    function identity(val: int): int
        val return
    end
    function square(val: int): int
        val val * return
    end
    function cube(val: int): int
        val val * val * return
    end
    function double(val: int): int
        val 2 * return
    end
    function triple(val: int): int
        val 3 * return
    end
    function half(val: int): int
        val 2 / return
    end
    function third(val: int): int
        val 3 / return
    end
    function negate(val: int): int
        val -1 * return
    end
    function abs(val: int): int
        if val 0 < then
            val -1 * return
        fi
        val return
    end
    function sign(val: int): int
        if val 0 < then
            1 return
        fi
        if val 0 > then
            -1 return
        fi
        0 return
    end
    function incr(val: int): int
        val 1 + return
    end
    function decr(val: int): int
        val 1 - return
    end
end

static struct Reducers
    function sum(acc: int, val: int): int
        acc val + return
    end
    function product(acc: int, val: int): int
        acc val * return
    end
    function max(acc: int, val: int): int
        if acc val > acc 0 != && then
            acc return
        fi
        val return
    end
    function min(acc: int, val: int): int
        if acc val < acc 0 != && then
            acc return
        fi
        val return
    end
    function avg(acc: int, val: int): int
        acc val + 2 / return
    end
    function count(acc: int, val: int): int
        acc 1 + return
    end
    function some(acc: int, val: int): int
        if val 0 == then
            acc return
        fi
        acc 1 + return
    end
    function first(acc: int, val: int): int
        if acc 0 != then
            acc return
        fi
        val return
    end
    function last(acc: int, val: int): int
        if val 0 != then
            val return
        fi
        acc return
    end
end

static struct Counters
    function all(_: int): bool
        true return
    end
    function positive(val: int): bool
        val 0 > return
    end
    function negative(val: int): bool
        val 0 < return
    end
    function even(val: int): bool
        val 2 % 0 == return
    end
    function odd(val: int): bool
        val 2 % 0 != return
    end
    function zero(val: int): bool
        val 0 == return
    end
    function nonZero(val: int): bool
        val 0 != return
    end
end

static struct Transformers
    macro! DefinePartialSum(type) {
        expand {
            function partialSum(data: [$type]): [int]
                if data:size 0 == then
                    new<int>[1] return
                fi

                new<int>[data:size] => decl counts: [int]

                for i in 0 to data:size do
                    decl acc: int
                    for j in 0 to i 1 + do
                        data[j] acc +> acc
                    done
                    acc => counts[i]
                done

                counts return
            end
        }
    }
    macro! DefinePartialProduct(type) {
        expand {
            function partialProduct(data: [$type]): [int]
                if data:size 0 == then
                    new<int>[1] return
                fi

                new<int>[data:size] => decl counts: [int]

                for i in 0 to data:size do
                    decl acc: int
                    for j in 0 to i 1 + do
                        data[j] acc *> acc
                    done
                    acc => counts[i]
                done

                counts return
            end
        }
    }
    macro! DefinePartialMin(type) {
        expand {
            function partialMin(data: [$type]): [int]
                if data:size 0 == then
                    new<int>[1] return
                fi

                new<int>[data:size] => decl counts: [int]

                for i in 0 to data:size do
                    decl acc: int
                    for j in 0 to i 1 + do
                        data[j] acc min => acc
                    done
                    acc => counts[i]
                done

                counts return
            end
        }
    }

    macro! DefinePartialMax(type) {
        expand {
            function partialMax(data: [$type]): [int]
                if data:size 0 == then
                    new<int>[1] return
                fi

                new<int>[data:size] => decl counts: [int]

                for i in 0 to data:size do
                    decl acc: int
                    for j in 0 to i 1 + do
                        data[j] acc max => acc
                    done
                    acc => counts[i]
                done

                counts return
            end
        }
    }

    DefinePartialSum! int8
    DefinePartialProduct! int8
    DefinePartialMin! int8
    DefinePartialMax! int8

    DefinePartialSum! int16
    DefinePartialProduct! int16
    DefinePartialMin! int16
    DefinePartialMax! int16

    DefinePartialSum! int32
    DefinePartialProduct! int32
    DefinePartialMin! int32
    DefinePartialMax! int32

    DefinePartialSum! int64
    DefinePartialProduct! int64
    DefinePartialMin! int64
    DefinePartialMax! int64

    DefinePartialSum! int
    DefinePartialProduct! int
    DefinePartialMin! int
    DefinePartialMax! int

    DefinePartialSum! uint8
    DefinePartialProduct! uint8
    DefinePartialMin! uint8
    DefinePartialMax! uint8

    DefinePartialSum! uint16
    DefinePartialProduct! uint16
    DefinePartialMin! uint16
    DefinePartialMax! uint16

    DefinePartialSum! uint32
    DefinePartialProduct! uint32
    DefinePartialMin! uint32
    DefinePartialMax! uint32

    DefinePartialSum! uint64
    DefinePartialProduct! uint64
    DefinePartialMin! uint64
    DefinePartialMax! uint64

    DefinePartialSum! uint
    DefinePartialProduct! uint
    DefinePartialMin! uint
    DefinePartialMax! uint

    function partialSum(data: str): [int]
        if data:size 0 == then
            new<int>[1] return
        fi

        new<int>[data:size] => decl counts: [int]

        for i in 0 to data:size do
            decl acc: int
            for j in 0 to i 1 + do
                data[j] acc +> acc
            done
            acc => counts[i]
        done

        counts return
    end

    function partialProduct(data: str): [int]
        if data:size 0 == then
            new<int>[1] return
        fi

        new<int>[data:size] => decl counts: [int]

        for i in 0 to data:size do
            decl acc: int
            for j in 0 to i 1 + do
                data[j] acc *> acc
            done
            acc => counts[i]
        done

        counts return
    end

    function partialMin(data: str): [int]
        if data:size 0 == then
            new<int>[1] return
        fi

        new<int>[data:size] => decl counts: [int]

        for i in 0 to data:size do
            decl acc: int
            for j in 0 to i 1 + do
                data[j] acc min => acc
            done
            acc => counts[i]
        done

        counts return
    end

    function partialMax(data: str): [int]
        if data:size 0 == then
            new<int>[1] return
        fi

        new<int>[data:size] => decl counts: [int]

        for i in 0 to data:size do
            decl acc: int
            for j in 0 to i 1 + do
                data[j] acc max => acc
            done
            acc => counts[i]
        done

        counts return
    end

    delmacro! DefinePartialSum
    delmacro! DefinePartialProduct
    delmacro! DefinePartialMin
    delmacro! DefinePartialMax
end
