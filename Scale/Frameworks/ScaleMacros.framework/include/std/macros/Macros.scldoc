@std.macros.Macros
@@{frameworkPath}/include/std/macros/Macros.scale
### macro! expand {}
Emits the tokens contained within the curly braces as if they were written in place of the macro invocation.

### macro! quote {}
Emits a single string literal containing the value of each token contained within the curly braces, separated by spaces.

### macro! config `key` is `value` {}
Emits the tokens contained within the curly braces only if the configuration value `key` is set to `value`.
Available configuration keys are:
- `"os"`: Set to one of `"win"`, `"mac"`, or `"linux"`
- `"os-name"`: Set to one of `"Windows"`, `"macOS"`, or `"Linux"`
- `"arch"`: Set to the processor architecture of the machine.
- `"version"`: Set to the current version.

### macro! config `key` is `value` ! {}
Emits the tokens contained within the curly braces only if the configuration value `key` is not set to `value`.
Available configuration keys are:
- `"os"`: Set to one of `"win"`, `"mac"`, or `"linux"`
- `"os-name"`: Set to one of `"Windows"`, `"macOS"`, or `"Linux"`
- `"arch"`: Set to the processor architecture of the machine.
- `"version"`: Set to the current version.

### macro! config `key` is nil {}
Emits the tokens contained within the curly braces only if the configuration value `key` is not set.
Available configuration keys are:
- `"os"`: Set to one of `"win"`, `"mac"`, or `"linux"`
- `"os-name"`: Set to one of `"Windows"`, `"macOS"`, or `"Linux"`
- `"arch"`: Set to the processor architecture of the machine.
- `"version"`: Set to the current version.

### macro! config `key` is nil ! {}
Emits the tokens contained within the curly braces only if the configuration value `key` is set.
Available configuration keys are:
- `"os"`: Set to one of `"win"`, `"mac"`, or `"linux"`
- `"os-name"`: Set to one of `"Windows"`, `"macOS"`, or `"Linux"`
- `"arch"`: Set to the processor architecture of the machine.
- `"version"`: Set to the current version.
