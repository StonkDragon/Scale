// file.scale
#ifndef _FILE_SCALE_
#define _FILE_SCALE_
#include "core.scale"

// Stack: [name, mode] -> [fileptr]
// Open a file by name in the given mode and
// push a file pointer to the stack.
extern fopen

// Stack: [fileptr] -> []
// Close a file pointer.
extern fclose

// Stack: [fileptr] -> [fileptr int]
// Runs ftell() and pushes the result to the stack.
extern ftell

// Stack: [fileptr] -> [int]
// Pushes the file descriptor of the file pointer to the stack.
extern fileno

// Stack: [fileptr, whence, offset] -> []
// Seeks to a new position in the file.
extern fseek

// Stack: [buf, size, file] -> []
// Write size bytes from buf to file ptr.
function fwrite(buf, size, file)
    file fileno size buf write
end

// Stack: [file, str] -> []
// Write str to file.
function fprintf(file, str)
    file fileno str strlen str write
end

// Stack: [file, size] -> [buf]
// Read size bytes from f into buf.
function fread(f, size)
    decl buf
    f fileno size read
    store buf
    buf return
end

// Stack: [file, offset] -> []
// Seek to offset from the beginning of the file.
function fseekstart(f, offset)
    f 0 offset fseek
end

// Stack: [file, offset] -> []
// Seek to offset from the end of the file.
function fseekend(f, offset)
    f 2 offset fseek
end

// Stack: [file, offset] -> []
// Seek to offset from the current position in the file.
function fseekcur(f, offset)
    f 1 offset fseek
end

#endif
