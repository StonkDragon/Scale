{
    "Main Function": {
		"scope": "source.scale",
		"prefix": "main",
		"body": [
			"function main(): none",
			"\t$0",
			"end"
		],
		"description": "Main Function"
	},
	"Function": {
		"scope": "source.scale",
		"prefix": "function",
		"body": [
			"function ${1:name}($2): ${3:none}",
			"\t$0",
			"end"
		],
		"description": "Create a function"
	},
	"Method": {
		"scope": "source.scale",
		"prefix": "method",
		"body": [
			"function ${1:type}:${2:name}($3): ${4:none}",
			"\t$0",
			"end"
		],
		"description": "Create a member function of a type"
	},
	"Using": {
		"scope": "source.scale",
		"prefix": "using",
		"body": [
			"using \"${1:file}\""
		],
		"description": "Using"
	},
	"Using-From": {
		"scope": "source.scale",
		"prefix": "from",
		"body": [
			"using \"${1:file}\" from \"${2:framework}\""
		],
		"description": "Using From"
	},
	"Init": {
		"scope": "source.scale",
		"prefix": "initmethod",
		"body": [
			"function ${1:type}:init($2): none",
			"\t$0",
			"end"
		],
		"description": "Initialization function of a type"
	},
	"While Loop": {
		"scope": "source.scale",
		"prefix": "while",
		"body": [
			"while ${1:condition} do",
			"\t$0",
			"done"
		],
		"description": "While loop"
	},
	"Switch Statement": {
		"scope": "source.scale",
		"prefix": "switch",
		"body": [
			"${1:value} switch",
			"\tcase ${2:value}",
			"\t\t$0",
			"\tesac",
			"done"
		],
		"description": "While loop"
	},
	"Case Statement": {
		"scope": "source.scale",
		"prefix": "case",
		"body": [
			"case ${1:value}",
			"\t$0",
			"esac"
		],
		"description": "While loop"
	},
	"Default Statement": {
		"scope": "source.scale",
		"prefix": "default",
		"body": [
			"default",
			"\t$0",
			"esac"
		],
		"description": "While loop"
	},
	"If Statement": {
		"scope": "source.scale",
		"prefix": "if",
		"body": [
			"${1:condition} if",
			"\t$0",
			"fi"
		],
		"description": "If statement"
	},
	"Else If Statement": {
		"scope": "source.scale",
		"prefix": "else if",
		"body": [
			"else ${1:condition} if",
			"\t$0",
			"fi"
		],
		"description": "Else If Statement"
	},
	"Else Statement": {
		"scope": "source.scale",
		"prefix": "else",
		"body": [
			"else",
			"\t$0",
			"fi"
		],
		"description": "Else statement"
	},
	"Extern Function": {
		"scope": "source.scale",
		"prefix": "extern",
		"body": [
			"extern"
		],
		"description": "Declare an extern function or variable"
	},
	"Load Var": {
		"scope": "source.scale",
		"prefix": "load",
		"body": [
			"${1:name}"
		],
		"description": "Push a variable onto the stack"
	},
	"Store Var": {
		"scope": "source.scale",
		"prefix": "store",
		"body": [
			"=> ${1:name}"
		],
		"description": "Store top of stack in variable"
	},
	"Declare Var": {
		"scope": "source.scale",
		"prefix": "declare",
		"body": [
			"decl ${1:name}: ${2:any}"
		],
		"description": "Declare a variable"
	},
	"Address of": {
		"scope": "source.scale",
		"prefix": "address of",
		"body": [
			"addr ${1:name}"
		],
		"description": "Address of"
	},
	"For Loop": {
		"scope": "source.scale",
		"prefix": "for",
		"body": [
			"for ${1:i} in ${2} to ${3} do",
			"\t$0",
			"done"
		],
		"description": "For Loop"
	},
	"For Loop with Step": {
		"scope": "source.scale",
		"prefix": "forstep",
		"body": [
			"for ${1:i} in ${2} to ${3} step ${4:++} do",
			"\t$0",
			"done"
		],
		"description": "For Loop with Step"
	},
	"Foreach Loop": {
		"scope": "source.scale",
		"prefix": "foreach",
		"body": [
			"foreach ${1:value} in ${2:iterable} do",
			"\t$0",
			"done"
		],
		"description": "Foreach Loop"
	},
	"Prototype": {
		"scope": "source.scale",
		"prefix": "prototype",
		"body": [
			"extern function ${1:name}($2): ${3:none}"
		],
		"description": "Declare a prototype"
	},
	"Reference": {
		"scope": "source.scale",
		"prefix": "reference",
		"body": [
			"=> @${1:name}"
		],
		"description": "Referenced write"
	},
	"Dereference": {
		"scope": "source.scale",
		"prefix": "dereference",
		"body": [
			"@"
		],
		"description": "Address Dereference"
	},
	"Repeat": {
		"scope": "source.scale",
		"prefix": "repeat",
		"body": [
			"repeat ${1:10} do",
			"\t$0",
			"done"
		],
		"description": "Repeat Block"
	},
	"Container": {
		"scope": "source.scale",
		"prefix": "container",
		"body": [
			"container ${1:name}",
			"\tdecl ${2:foo}: ${3:any}",
			"end"
		],
		"description": "Container"
	},
	"Struct": {
		"scope": "source.scale",
		"prefix": "struct",
		"body": [
			"struct ${1:name}",
			"\t$0",
			"end"
		],
		"description": "Struct"
	},
	"Sealed Struct": {
		"scope": "source.scale",
		"prefix": "sealed struct",
		"body": [
			"@sealed",
			"struct ${1:name}",
			"\t$0",
			"end"
		],
		"description": "Struct"
	},
	"Interface": {
		"scope": "source.scale",
		"prefix": "interface",
		"body": [
			"interface ${1:name}",
			"\t$0",
			"end"
		],
		"description": "Interface"
	},
	"Array literal": {
		"scope": "source.scale",
		"prefix": "array",
		"body": [
			"{${0:element}}"
		],
		"description": "Array literal"
	},
	"Map literal": {
		"scope": "source.scale",
		"prefix": "map",
		"body": [
			"[\"${1:key}\": ${0:value}]",
		],
		"description": "Map literal"
	},
	"Map Entry literal": {
		"scope": "source.scale",
		"prefix": "mapentry",
		"body": [
			"(\"${1:key}\": ${0:value})",
		],
		"description": "Map Entry literal"
	},
	"Pair literal": {
		"scope": "source.scale",
		"prefix": "pair",
		"body": [
			"(${1:a}, ${0:b})",
		],
		"description": "Pair literal"
	},
	"Triple literal": {
		"scope": "source.scale",
		"prefix": "triple",
		"body": [
			"(${1:a}, ${2:b}, ${0:c})",
		],
		"description": "Triple literal"
	},
}