{
	"Main Function": {
		"scope": "source.scale",
		"prefix": "main",
		"body": [
			"function main(): none",
			"\t$0",
			"end"
		],
		"description": "Main Function"
	},
	"Function": {
		"scope": "source.scale",
		"prefix": "function",
		"body": [
			"function ${1:name}($2): ${3:none}",
			"\t$0",
			"end"
		],
		"description": "Create a function"
	},
	"Lambda": {
		"scope": "source.scale",
		"prefix": "lambda",
		"body": [
			"lambda($1): ${2:none}",
			"\t$0",
			"end"
		],
		"description": "Create an anonymous function"
	},
	"Method": {
		"scope": "source.scale",
		"prefix": "method",
		"body": [
			"function ${1:type}:${2:name}($3): ${4:none}",
			"\t$0",
			"end"
		],
		"description": "Create a member function of a type"
	},
	"Import": {
		"scope": "source.scale",
		"prefix": "import",
		"body": [
			"import ${1:file}"
		],
		"description": "Import file. Replace '/' in file path with '.'!"
	},
	"Init": {
		"scope": "source.scale",
		"prefix": "initmethod",
		"body": [
			"function ${1:type}:init($2): none",
			"\t$0",
			"end"
		],
		"description": "Initialization function of a type"
	},
	"While Loop": {
		"scope": "source.scale",
		"prefix": "while",
		"body": [
			"while ${1:condition} do",
			"\t$0",
			"done"
		],
		"description": "While loop"
	},
	"Switch Statement": {
		"scope": "source.scale",
		"prefix": "switch",
		"body": [
			"${1:value} switch",
			"\tcase ${2:value}",
			"\t\t$0",
			"\tesac",
			"done"
		],
		"description": "While loop"
	},
	"Case Statement": {
		"scope": "source.scale",
		"prefix": "case",
		"body": [
			"case ${1:value}",
			"\t$0",
			"esac"
		],
		"description": "While loop"
	},
	"Default Statement": {
		"scope": "source.scale",
		"prefix": "default",
		"body": [
			"default",
			"\t$0",
			"esac"
		],
		"description": "While loop"
	},
	"If Statement": {
		"scope": "source.scale",
		"prefix": "if",
		"body": [
			"if ${1:condition} then"
		],
		"description": "If statement"
	},
	"Else If Statement": {
		"scope": "source.scale",
		"prefix": "else if",
		"body": [
			"elif ${1:condition} then"
		],
		"description": "Else If Statement"
	},
	"Else Statement": {
		"scope": "source.scale",
		"prefix": "else",
		"body": [
			"else"
		],
		"description": "Else statement"
	},
	"Fi Statement": {
		"scope": "source.scale",
		"prefix": "fi",
		"body": [
			"fi"
		],
		"description": "Fi statement"
	},
	"Extern Function": {
		"scope": "source.scale",
		"prefix": "extern function",
		"body": [
			"expect function ${1:name}($2): ${3:none}"
		],
		"description": "Import a function from a library or object file"
	},
	"Export Function": {
		"scope": "source.scale",
		"prefix": "export",
		"body": [
			"export function ${1:name}($2): ${3:none}",
			"\t$0",
			"end"
		],
		"description": "Export a function to C"
	},
	"Extern Method": {
		"scope": "source.scale",
		"prefix": "extern method",
		"body": [
			"expect function ${1:type}:${2:name}($3): ${4:none}"
		],
		"description": "Import a method from a library or object file"
	},
	"Load Var": {
		"scope": "source.scale",
		"prefix": "load",
		"body": [
			"${1:name}"
		],
		"description": "Push a variable onto the stack"
	},
	"Store Var": {
		"scope": "source.scale",
		"prefix": "store",
		"body": [
			"=> ${1:name}"
		],
		"description": "Store top of stack in variable"
	},
	"Declare Var": {
		"scope": "source.scale",
		"prefix": "declare",
		"body": [
			"decl ${1:name}: ${2:any}"
		],
		"description": "Declare a variable"
	},
	"Store New Var": {
		"scope": "source.scale",
		"prefix": "storenew",
		"body": [
			"=> decl ${1:name}: ${2:any}"
		],
		"description": "Declare a variable and store value"
	},
	"Address of": {
		"scope": "source.scale",
		"prefix": "address of",
		"body": [
			"addr ${1:name}"
		],
		"description": "Address of"
	},
	"For Loop": {
		"scope": "source.scale",
		"prefix": "for",
		"body": [
			"for ${1:i} in ${2} to ${3} do",
			"\t$0",
			"done"
		],
		"description": "For Loop"
	},
	"For Loop with Step": {
		"scope": "source.scale",
		"prefix": "forstep",
		"body": [
			"for ${1:i} in ${2} to ${3} step ${4:++} do",
			"\t$0",
			"done"
		],
		"description": "For Loop with Step"
	},
	"Foreach Loop": {
		"scope": "source.scale",
		"prefix": "foreach",
		"body": [
			"foreach ${1:value} in ${2:iterable} do",
			"\t$0",
			"done"
		],
		"description": "Foreach Loop"
	},
	"Try Catch": {
		"scope": "source.scale",
		"prefix": "try-catch",
		"body": [
			"try",
			"\t$0",
			"catch typeof ${1:Exception}",
			"\t# Handle exceptions of type '${1:Exception}' here",
			"\t",
			"done"
		],
		"description": "Try-Catch Statement"
	},
	"Dereference": {
		"scope": "source.scale",
		"prefix": "dereference",
		"body": [
			"@"
		],
		"description": "Address Dereference"
	},
	"Repeat": {
		"scope": "source.scale",
		"prefix": "repeat",
		"body": [
			"repeat ${1:10} do",
			"\t$0",
			"done"
		],
		"description": "Repeat Block"
	},
	"Container": {
		"scope": "source.scale",
		"prefix": "container",
		"body": [
			"container ${1:name}",
			"\tdecl ${2:foo}: ${3:any}",
			"end"
		],
		"description": "Container"
	},
	"Struct": {
		"scope": "source.scale",
		"prefix": "struct",
		"body": [
			"struct ${1:name}",
			"\t$0",
			"end"
		],
		"description": "Struct"
	},
	"Enum": {
		"scope": "source.scale",
		"prefix": "enum",
		"body": [
			"enum ${1:name}",
			"\t$0",
			"end"
		],
		"description": "Struct"
	},
	"Sealed Struct": {
		"scope": "source.scale",
		"prefix": "sealed struct",
		"body": [
			"sealed struct ${1:name}",
			"\t$0",
			"end"
		],
		"description": "Struct"
	},
	"Interface": {
		"scope": "source.scale",
		"prefix": "interface",
		"body": [
			"interface ${1:name}",
			"\t$0",
			"end"
		],
		"description": "Interface"
	},
	"Array literal": {
		"scope": "source.scale",
		"prefix": "array",
		"body": [
			"{${0:element}}"
		],
		"description": "Array literal"
	},
	"Map literal": {
		"scope": "source.scale",
		"prefix": "map",
		"body": [
			"[\"${1:key}\": ${0:value}]",
		],
		"description": "Map literal"
	},
	"Map Entry literal": {
		"scope": "source.scale",
		"prefix": "mapentry",
		"body": [
			"(\"${1:key}\": ${0:value})",
		],
		"description": "Map Entry literal"
	},
	"Pair literal": {
		"scope": "source.scale",
		"prefix": "pair",
		"body": [
			"(${1:a}, ${0:b})",
		],
		"description": "Pair literal"
	},
	"Triple literal": {
		"scope": "source.scale",
		"prefix": "triple",
		"body": [
			"(${1:a}, ${2:b}, ${0:c})",
		],
		"description": "Triple literal"
	},
	"Inline C": {
		"scope": "source.scale",
		"prefix": "inline c",
		"body": [
			"inline_c",
			"\t$0",
			"end_inline",
		],
		"description": "Inline C"
	},
	"Keyword end": {
		"scope": "source.scale",
		"prefix": "end",
		"body": [
			"end",
		],
		"description": "end"
	},
	"Keyword do": {
		"scope": "source.scale",
		"prefix": "do",
		"body": [
			"do",
		],
		"description": "do"
	},
	"Keyword done": {
		"scope": "source.scale",
		"prefix": "done",
		"body": [
			"done",
		],
		"description": "done"
	},
	"Keyword then": {
		"scope": "source.scale",
		"prefix": "then",
		"body": [
			"then",
		],
		"description": "then"
	},
	"Keyword fi": {
		"scope": "source.scale",
		"prefix": "fi",
		"body": [
			"fi",
		],
		"description": "fi"
	},
	"Keyword esac": {
		"scope": "source.scale",
		"prefix": "esac",
		"body": [
			"esac",
		],
		"description": "esac"
	},
	"Keyword default": {
		"scope": "source.scale",
		"prefix": "default",
		"body": [
			"default",
		],
		"description": "default"
	},
	"Keyword return": {
		"scope": "source.scale",
		"prefix": "return",
		"body": [
			"return",
		],
		"description": "return"
	},
	"Keyword break": {
		"scope": "source.scale",
		"prefix": "break",
		"body": [
			"break",
		],
		"description": "break"
	},
	"Keyword continue": {
		"scope": "source.scale",
		"prefix": "continue",
		"body": [
			"continue",
		],
		"description": "continue"
	},
	"Keyword in": {
		"scope": "source.scale",
		"prefix": "in",
		"body": [
			"in",
		],
		"description": "in"
	},
	"Keyword to": {
		"scope": "source.scale",
		"prefix": "to",
		"body": [
			"to",
		],
		"description": "to"
	},
	"Keyword step": {
		"scope": "source.scale",
		"prefix": "step",
		"body": [
			"step",
		],
		"description": "step"
	},
	"Keyword addr": {
		"scope": "source.scale",
		"prefix": "addr",
		"body": [
			"addr",
		],
		"description": "addr"
	},
	"Keyword nil": {
		"scope": "source.scale",
		"prefix": "nil",
		"body": [
			"nil",
		],
		"description": "nil"
	},
	"Keyword true": {
		"scope": "source.scale",
		"prefix": "true",
		"body": [
			"true",
		],
		"description": "true"
	},
	"Keyword false": {
		"scope": "source.scale",
		"prefix": "false",
		"body": [
			"false",
		],
		"description": "false"
	},
	"Keyword typeof": {
		"scope": "source.scale",
		"prefix": "typeof",
		"body": [
			"typeof",
		],
		"description": "typeof"
	},
	"Keyword nameof": {
		"scope": "source.scale",
		"prefix": "nameof",
		"body": [
			"nameof",
		],
		"description": "nameof"
	},
	"Keyword sizeof": {
		"scope": "source.scale",
		"prefix": "sizeof",
		"body": [
			"sizeof",
		],
		"description": "sizeof"
	},
	"Keyword typealias": {
		"scope": "source.scale",
		"prefix": "typealias",
		"body": [
			"typealias",
		],
		"description": "typealias"
	},
	"Keyword as": {
		"scope": "source.scale",
		"prefix": "as",
		"body": [
			"as",
		],
		"description": "as"
	},
	"Keyword new": {
		"scope": "source.scale",
		"prefix": "new",
		"body": [
			"new",
		],
		"description": "new"
	},
	"Keyword is": {
		"scope": "source.scale",
		"prefix": "is",
		"body": [
			"is",
		],
		"description": "is"
	},
	"Keyword goto": {
		"scope": "source.scale",
		"prefix": "goto",
		"body": [
			"goto",
		],
		"description": "goto"
	},
	"Keyword label": {
		"scope": "source.scale",
		"prefix": "label",
		"body": [
			"label",
		],
		"description": "label"
	},
	"Keyword self": {
		"scope": "source.scale",
		"prefix": "self",
		"body": [
			"self",
		],
		"description": "self"
	},
	"Keyword sealed": {
		"scope": "source.scale",
		"prefix": "sealed",
		"body": [
			"sealed",
		],
		"description": "sealed"
	},
	"Keyword nowarn": {
		"scope": "source.scale",
		"prefix": "nowarn",
		"body": [
			"nowarn",
		],
		"description": "nowarn"
	},
	"Keyword nomangle": {
		"scope": "source.scale",
		"prefix": "nomangle",
		"body": [
			"nomangle",
		],
		"description": "nomangle"
	},
	"Keyword static": {
		"scope": "source.scale",
		"prefix": "static",
		"body": [
			"static",
		],
		"description": "static"
	},
	"Keyword private": {
		"scope": "source.scale",
		"prefix": "private",
		"body": [
			"private",
		],
		"description": "private"
	},
	"Keyword referencetype": {
		"scope": "source.scale",
		"prefix": "referencetype",
		"body": [
			"referencetype",
		],
		"description": "referencetype"
	},
	"Keyword valuetype": {
		"scope": "source.scale",
		"prefix": "valuetype",
		"body": [
			"valuetype",
		],
		"description": "valuetype"
	},
	"Keyword const": {
		"scope": "source.scale",
		"prefix": "const",
		"body": [
			"const",
		],
		"description": "const"
	},
	"Keyword readonly": {
		"scope": "source.scale",
		"prefix": "readonly",
		"body": [
			"readonly",
		],
		"description": "readonly"
	},
	"Keyword mut": {
		"scope": "source.scale",
		"prefix": "mut",
		"body": [
			"mut",
		],
		"description": "mut"
	},
}