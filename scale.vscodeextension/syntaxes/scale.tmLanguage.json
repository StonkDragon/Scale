{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "scale",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#preproc"
		},
		{
			"include": "#modifiers"
		},
		{
			"include": "#symbols"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#funcs"
		},
		{
			"include": "#func_end"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#chars"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#generic"
		}
	],
	"repository": {
		"comments": {
			"name": "string.comment",
			"begin": "//",
			"end": "\n",
			"patterns": [
				{
					"name": "comment",
					"match": "\\\\."
				}
			]
		},
		"modifiers": {
			"name": "entity.name.function",
			"begin": "@",
			"end": "\\s",
			"patterns": [
				{
					"name": "meta.type.annotation",
					"match": "\\\\."
				}
			]
		},
		"preproc": {
			"name": "entity.name.function",
			"patterns": [
				{
					"name": "entity.name.function",
					"match": "#(include|ifdef|ifndef|if|define|undef|endif|error|warning|else)\\b"
				}
			]
		},
		"constants": {
			"name": "entity.name.function",
			"patterns": [
				{
					"name": "entity.name.function",
					"match": "\\b(true|false|nil)\\b"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword",
					"match": "\\b(deref|ref|addr|decl|load|store|proto|function|end|extern|while|else|do|done|if|fi|return|for|in|to|container|repeat|complex|new)\\b"
				}
			]
		},
		"funcs": {
			"patterns": [
				{
					"name": "support.function",
					"match": "[A-Za-z_]+([A-Za-z_0-9]+)?\\("
				}
			]
		},
		"func_end": {
			"patterns": [
				{
					"name": "support.function",
					"match": "\\)"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "string",
					"match": "\\\\."
				}
			]
		},
		"chars": {
			"name": "constant.character",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "char",
					"match": "\\\\?."
				}
			]
		},
		"numbers": {
			"name": "constant.numeric",
			"match": "\\b(0x[0-9a-fA-F]+|0b[0-1]+|0o[0-7]+|[0-9]+(\\.[0-9]+)?)\\b"
		},
		"generic": {
			"name": "entity.name.tag",
			"match": "."
		},
		"symbols": {
			"name": "keyword",
			"match": "(::|->|\\.|(\\.?(\\+|-|\\*|/))|%|&|\\||\\^|<<|>>|~|\\[|\\])"
		}
	},
	"scopeName": "source.scale"
}